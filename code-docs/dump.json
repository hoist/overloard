[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/areas/application/application_controller.js",
    "memberof": null,
    "longname": "server/areas/application/application_controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {BaseController} from '../base_controller';\nimport {Organisation, HoistUser, Application, Session} from '@hoist/model';\nimport errors from '@hoist/errors';\nimport {StringUtils} from '../../utils';\n/**\n * Controller for user actions related their Applications\n * @extends {BaseController}\n */\nexport class ApplicationController extends BaseController {\n  /**\n   * create a new OrganistionController\n   */\n  constructor () {\n    super();\n  }\n  _createSlugFromName (name, postfix = '') {\n    name = StringUtils.sanitiseName(name);\n    return Application\n      .countAsync({\n      slug: name + postfix\n    })\n      .then((count) => {\n        if (count > 0) {\n          //colision so add number\n          return this._createSlugFromName(name, Math.floor(Math.random() * 10000));\n        }\n        return name + postfix;\n      });\n  }\n\n  /**\n   * create a Application\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  create (request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        if (!request.payload.name || request.payload.name.length < 1) {\n          throw new errors.Http400Error('Application Name must be supplied');\n        }\n      })\n      .then(() => {\n        return this\n          ._createSlugFromName(request.payload.name)\n          .then((slug) => {\n            return {organisation: request.auth.credentials.organisation, name: request.payload.name, slug}\n          });\n      })\n      .then(applicationDetails => {\n        return new Application(applicationDetails).saveAsync();\n      })\n      .then((application) => {\n        if (application.length) {\n          application = application[0];\n        }\n        return {_id: application._id, slug: application.slug, name: application.name};\n      })\n      .then((application) => {\n        reply(application).code(201);\n        return Session.updateAsync({\n          _id: request.auth.credentials._id\n        }, {\n          $set: {\n            application: application._id\n          }\n        });\n      });\n  }\n\n  /**\n   * @override\n   * @returns {Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration\n   */\n  routes () {\n    return [\n      {\n        method: ['POST'],\n        path: '/application',\n        config: {\n          handler: this.create,\n          auth: {\n            strategy: 'session'\n          }\n        }\n      }\n    ]\n  }\n}\nexport default ApplicationController;\n"
  },
  {
    "__docId__": 1,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ApplicationController",
    "memberof": "server/areas/application/application_controller.js",
    "longname": "server/areas/application/application_controller.js~ApplicationController",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/areas/application/application_controller.js",
    "importStyle": "{ApplicationController}",
    "description": "Controller for user actions related their Applications",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "BaseController"
    ]
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/areas/application/application_controller.js~ApplicationController",
    "longname": "server/areas/application/application_controller.js~ApplicationController#constructor",
    "access": null,
    "description": "create a new OrganistionController",
    "lineNumber": 13,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 3,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_createSlugFromName",
    "memberof": "server/areas/application/application_controller.js~ApplicationController",
    "longname": "server/areas/application/application_controller.js~ApplicationController#_createSlugFromName",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "postfix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 4,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "create",
    "memberof": "server/areas/application/application_controller.js~ApplicationController",
    "longname": "server/areas/application/application_controller.js~ApplicationController#create",
    "access": null,
    "description": "create a Application",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 5,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "routes",
    "memberof": "server/areas/application/application_controller.js~ApplicationController",
    "longname": "server/areas/application/application_controller.js~ApplicationController#routes",
    "access": null,
    "description": null,
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "an array of route configurations @see http://hapijs.com/api#route-configuration"
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 6,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/areas/base_controller.js",
    "memberof": null,
    "longname": "server/areas/base_controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {_mongoose} from '@hoist/model';\nimport errors from '@hoist/errors';\nimport logger from '@hoist/logger';\nimport path from 'path';\nimport Boom from 'boom';\n/**\n * a base interface for controller classes\n */\n/* istanbul ignore next */\nexport class BaseController {\n  /**\n   * create a new BaseController\n   */\n  constructor () {\n    this._logger = logger.child({cls: this.constructor.name})\n  }\n\n  /**\n   * load all routes exposed by this controller, with default configurations\n   */\n  _loadRoutes (hapiServer) {\n    return Promise\n      .resolve()\n      .then(() => {\n        this\n          ._logger\n          .info('setting up routes for controller');\n        return this.routes();\n      })\n      .then((routes) => {\n        return routes || [];\n      })\n      .then((routes) => {\n        this\n          ._logger\n          .debug({\n            routes: routes.length\n          }, 'mapping routes');\n        return routes.map((route) => this._ensureRouteValid(route));\n      })\n      .then((routes) => {\n        this\n          ._logger\n          .debug('sending routes to server');\n        return hapiServer.route(routes);\n      });\n  }\n\n  /**\n   * ensure the route has all the defaults set up correctly\n   */\n  _ensureRouteValid (routeObject) {\n    //ensure we have a config object\n    routeObject.config = routeObject.config || {};\n    if (routeObject.handler) {\n      this\n        ._logger\n        .debug('moving handler to config object')\n      routeObject.config.handler = routeObject.handler;\n      delete routeObject.handler;\n    }\n    if (routeObject.config.handler) {\n      let handler = routeObject\n        .config\n        .handler\n        .bind(this);\n      routeObject.config.handler = (req, reply) => {\n        return Promise\n          .resolve()\n          .then(() => handler(req, reply))\n          .catch((err) => {\n            this._onRequestError(req, reply, err);\n          })\n          .catch((err) => {\n            this\n              ._logger\n              .alert(err);\n            this\n              ._logger\n              .error(err);\n          });\n      }\n    }\n    //ensure we have an auth setup\n    if (routeObject.config.auth === undefined || routeObject.config.auth === null) {\n      this\n        ._logger\n        .debug('adding auth to route');\n      routeObject.config.auth = {\n        strategy: 'session'\n      }\n    }\n    if (!routeObject.path.startsWith('/api')) {\n      this\n        ._logger\n        .debug('setting api path');\n      routeObject.path = path.join('/api', routeObject.path);\n    }\n    return routeObject;\n  }\n\n  /**\n   * expose routes for the controller\n   * @abstract\n   * @returns {Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration\n   */\n  routes () {\n    this\n      ._logger\n      .error('controller should redefine the #routes methods');\n    throw new Error(\"controllers should override #routes\");\n  }\n\n  /**\n   * this is a generic controller error handler, you shouldn't really get here but is a catch if exception handling hasn't been done\n   */\n  _onRequestError (request, reply, error) {\n    this\n      ._logger\n      .error(error);\n    if (error instanceof _mongoose.Error) {\n      if (error instanceof _mongoose.Error.ValidationError) {\n        var boom = Boom.badRequest(error.message);\n        boom.output.payload.errors = error.errors;\n        error = boom;\n      }\n    }\n    if (error.isBoom) {\n      return reply(error);\n    } else if (!errors.isHoistError(error)) {\n      error = new errors.HoistError();\n    }\n    reply(Boom.wrap(error, error.code || 500));\n\n  }\n}\n\n/**\n * @external {HapiRequest} http://hapijs.com/api#request-object\n * @external {HapiReply} http://hapijs.com/api#reply-interface\n */\n"
  },
  {
    "__docId__": 7,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BaseController",
    "memberof": "server/areas/base_controller.js",
    "longname": "server/areas/base_controller.js~BaseController",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/areas/base_controller.js",
    "importStyle": "{BaseController}",
    "description": "a base interface for controller classes",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 8,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "HapiReply",
    "externalLink": "http://hapijs.com/api#reply-interface",
    "memberof": "server/areas/base_controller.js",
    "longname": "server/areas/base_controller.js~HapiReply",
    "access": null,
    "description": null
  },
  {
    "__docId__": 9,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/areas/base_controller.js~BaseController",
    "longname": "server/areas/base_controller.js~BaseController#constructor",
    "access": null,
    "description": "create a new BaseController",
    "lineNumber": 14,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 10,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_logger",
    "memberof": "server/areas/base_controller.js~BaseController",
    "longname": "server/areas/base_controller.js~BaseController#_logger",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_loadRoutes",
    "memberof": "server/areas/base_controller.js~BaseController",
    "longname": "server/areas/base_controller.js~BaseController#_loadRoutes",
    "access": null,
    "description": "load all routes exposed by this controller, with default configurations",
    "lineNumber": 21,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_ensureRouteValid",
    "memberof": "server/areas/base_controller.js~BaseController",
    "longname": "server/areas/base_controller.js~BaseController#_ensureRouteValid",
    "access": null,
    "description": "ensure the route has all the defaults set up correctly",
    "lineNumber": 52,
    "params": [
      {
        "name": "routeObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "routes",
    "memberof": "server/areas/base_controller.js~BaseController",
    "longname": "server/areas/base_controller.js~BaseController#routes",
    "access": null,
    "description": "expose routes for the controller",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "an array of route configurations @see http://hapijs.com/api#route-configuration"
    },
    "abstract": true,
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_onRequestError",
    "memberof": "server/areas/base_controller.js~BaseController",
    "longname": "server/areas/base_controller.js~BaseController#_onRequestError",
    "access": null,
    "description": "this is a generic controller error handler, you shouldn't really get here but is a catch if exception handling hasn't been done",
    "lineNumber": 117,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "reply",
        "types": [
          "*"
        ]
      },
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/areas/connector/connector_controller.js",
    "memberof": null,
    "longname": "server/areas/connector/connector_controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {\n  BaseController\n} from '../base_controller';\nimport {\n  ConnectorLogic\n} from '../../logic';\nimport errors from '@hoist/errors';\nimport fs from 'fs';\nimport path from 'path';\nimport Boom from 'boom';\nimport bluebird from 'bluebird';\nimport config from 'config';\n\nbluebird.promisifyAll(fs);\n\n/**\n * Controller for user actions related their Organisations\n * @extends {BaseController}\n */\nexport class ConnectorController extends BaseController {\n  /**\n   * create a new OrganistionController\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * get a list connectors for the current application\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  list(request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        if (request.auth.credentials.application) {\n          return ConnectorLogic.getConnectorsForApplication(request.auth.credentials.application)\n        } else {\n          return [];\n        }\n      })\n      .then((connectors) => {\n        reply(connectors);\n      });\n  }\n  connectorBundle(request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        let connectorPath = path.resolve(config.get('Hoist.filePaths.connectors'), `./${request.params.connectorType}/current`)\n        return fs.realpathAsync(connectorPath)\n      })\n      .then((connectorPath) => {\n        let bundlePath = path.resolve(connectorPath, `./lib/views/${request.params.bundle}.js`);\n        if (fs.existsSync(bundlePath)) {\n          let response = reply.file(bundlePath);\n          response.type('application/javascript');\n        } else {\n          reply(Boom.notFound());\n        }\n      });\n  }\n  connect(request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        return ConnectorLogic.setupDefaultConnector(request.auth.credentials.application, request.payload.connectorType);\n      })\n      .then((connector) => {\n        return ConnectorLogic.getAuthUrl(connector,request.auth.credentials.organisation.slug,request.auth.credentials.application.slug);\n      })\n      .then((uri) => {\n        reply({\n          uri\n        });\n      })\n  }\n\n  /**\n   * @override\n   * @returns {Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration\n   */\n  routes() {\n    return [\n      {\n        method: ['GET'],\n        path: '/connectors',\n        config: {\n          handler: this.list,\n          auth: {\n            strategy: 'session'\n          }\n        }\n      }, {\n        method: ['GET'],\n        path: '/connector/bundle/{connectorType}/{bundle}',\n        config: {\n          handler: this.connectorBundle,\n          auth: {\n            strategy: 'session'\n          }\n        }\n      }, {\n        method: ['POST'],\n        path: '/connector/connect',\n        config: {\n          handler: this.connect,\n          auth: {\n            strategy: 'session'\n          }\n        }\n      }\n    ]\n  }\n}\nexport default ConnectorController;\n"
  },
  {
    "__docId__": 16,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ConnectorController",
    "memberof": "server/areas/connector/connector_controller.js",
    "longname": "server/areas/connector/connector_controller.js~ConnectorController",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/areas/connector/connector_controller.js",
    "importStyle": "{ConnectorController}",
    "description": "Controller for user actions related their Organisations",
    "lineNumber": 20,
    "interface": false,
    "extends": [
      "BaseController"
    ]
  },
  {
    "__docId__": 17,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/areas/connector/connector_controller.js~ConnectorController",
    "longname": "server/areas/connector/connector_controller.js~ConnectorController#constructor",
    "access": null,
    "description": "create a new OrganistionController",
    "lineNumber": 24,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "list",
    "memberof": "server/areas/connector/connector_controller.js~ConnectorController",
    "longname": "server/areas/connector/connector_controller.js~ConnectorController#list",
    "access": null,
    "description": "get a list connectors for the current application",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connectorBundle",
    "memberof": "server/areas/connector/connector_controller.js~ConnectorController",
    "longname": "server/areas/connector/connector_controller.js~ConnectorController#connectorBundle",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "reply",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "connect",
    "memberof": "server/areas/connector/connector_controller.js~ConnectorController",
    "longname": "server/areas/connector/connector_controller.js~ConnectorController#connect",
    "access": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "reply",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "routes",
    "memberof": "server/areas/connector/connector_controller.js~ConnectorController",
    "longname": "server/areas/connector/connector_controller.js~ConnectorController#routes",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "an array of route configurations @see http://hapijs.com/api#route-configuration"
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/areas/console/console_controller.js",
    "memberof": null,
    "longname": "server/areas/console/console_controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {\n  BaseController\n} from '../base_controller';\nimport {\n  ConsoleLogic\n} from '../../logic';\nimport uuid from 'uuid';\nimport errors from '@hoist/errors';\n/**\n * Controller for actions related to the developer console\n * @extends {BaseController}\n */\nexport class ConsoleController extends BaseController {\n  /**\n   * create a new ConsoleController\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * gets state data to populate the editor\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  get(request, reply) {\n    if (process.env.TEST_CONSOLE) {\n      return Promise\n        .resolve()\n        .then(() => {\n          reply({\n            \"messages\": [\n              {\n                \"id\": \"5dff5df9b09054439c95feda720a084d27b6a71f\",\n                \"type\": \"DEPLOY\",\n                \"message\": \"mDeploy complete. Hash: 5dff5df9b09054439c95feda720a084d27b6a71f\",\n                \"time\": \"01:17:02\",\n                \"stack\": []\n              }, {\n                \"id\": \"56e21c8c39838a18008c5663\",\n                \"type\": \"MDL\",\n                \"message\": \"module pingLog starting (from event id: c43ae06b70464895b8a8e5174c659863)\",\n                \"time\": \"01:17:02\",\n                \"stack\": []\n              }, {\n              //   \"id\": \"56e21c8c39838a18008c5664\",\n              //   \"type\": \"LOG\",\n              //   \"message\": \"[\\\"got a ping\\\",{\\\"eventId\\\":\\\"c43ae06b70464895b8a8e5174c659863\\\",\\\"applicationId\\\":\\\"demo-connect-app\\\",\\\"eventName\\\":\\\"ping:me\\\",\\\"environment\\\":\\\"live\\\",\\\"correlationId\\\":\\\"582daa27-e1bc-4ce7-8b79-16a925ec14c7\\\",\\\"_id\\\":\\\"56e21c8c40cd5339004a39e3\\\"}]\",\n              //   \"time\": \"01:17:02\",\n              //   \"stack\": []\n              // }, {\n                \"id\": \"56e21c8c40cd5339004a39e7\",\n                \"type\": \"EVT\",\n                \"message\": \"event ping:me raised (id: c43ae06b70464895b8a8e5174c659863)\",\n                \"time\": \"01:17:02\",\n                \"stack\": []\n              }, {\n                \"id\": \"56e21c8c39838a18008c5665\",\n                \"type\": \"MDL\",\n                \"message\": \"module pingLog completed in 8.023706ms (from event id: c43ae06b70464895b8a8e5174c659863)\",\n                \"time\": \"01:17:02\",\n                \"stack\": []\n              }, {\n                \"id\": \"56e21c8c39838a18008c5666\",\n                \"type\": \"EVT\",\n                \"message\": \"event ping:me complete (id: c43ae06b70464895b8a8e5174c659863)\",\n                \"time\": \"01:17:02\",\n                \"stack\": []\n              }\n            ],\n            \"continuationToken\": \"b2ef3173-c459-4fb1-9e1f-c20a6e688368\"\n          });\n        });\n    }\n    return Promise\n      .resolve()\n      .then(() => {\n        return request.query.continuationToken || uuid.v4();\n      })\n      .then((continuationToken) => {\n        return ConsoleLogic\n          .getMessages(request.auth.credentials.application, continuationToken)\n          .then((messages) => {\n            this\n              ._logger\n              .info({\n                messages\n              }, 'reply from rabbit');\n            reply({\n              messages: messages,\n              continuationToken\n            })\n          });\n      });\n\n  }\n\n  /**\n   * @override\n   * @returns {Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration\n   */\n  routes() {\n    return [\n      {\n        method: 'GET',\n        path: '/console',\n        config: {\n          handler: this.get,\n          auth: {\n            strategy: 'session'\n          },\n          plugins: {\n            'hapi-auth-cookie': {\n              redirectTo: false\n            }\n          }\n        }\n      }\n    ]\n  }\n}\nexport default ConsoleController;\n"
  },
  {
    "__docId__": 23,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ConsoleController",
    "memberof": "server/areas/console/console_controller.js",
    "longname": "server/areas/console/console_controller.js~ConsoleController",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/areas/console/console_controller.js",
    "importStyle": "{ConsoleController}",
    "description": "Controller for actions related to the developer console",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "BaseController"
    ]
  },
  {
    "__docId__": 24,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/areas/console/console_controller.js~ConsoleController",
    "longname": "server/areas/console/console_controller.js~ConsoleController#constructor",
    "access": null,
    "description": "create a new ConsoleController",
    "lineNumber": 17,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "get",
    "memberof": "server/areas/console/console_controller.js~ConsoleController",
    "longname": "server/areas/console/console_controller.js~ConsoleController#get",
    "access": null,
    "description": "gets state data to populate the editor",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "routes",
    "memberof": "server/areas/console/console_controller.js~ConsoleController",
    "longname": "server/areas/console/console_controller.js~ConsoleController#routes",
    "access": null,
    "description": null,
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "an array of route configurations @see http://hapijs.com/api#route-configuration"
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/areas/editor/editor_controller.js",
    "memberof": null,
    "longname": "server/areas/editor/editor_controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {\n  BaseController\n} from '../base_controller';\nimport {\n  ConnectorLogic,\n  EditorLogic,\n  EventLogic\n} from '../../logic';\nimport {\n  uniq,\n  flatten\n} from 'lodash';\nimport errors from '@hoist/errors';\n/**\n * Controller for user actions related their Organisations\n * @extends {BaseController}\n */\nexport class EditorController extends BaseController {\n  /**\n   * create a new OrganistionController\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * gets state data to populate the editor\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  state(request, reply) {\n    let data = {};\n    return Promise.resolve()\n      .then(() => {\n        if (request.auth.credentials.application) {\n          return ConnectorLogic.getConnectorsForApplication(request.auth.credentials.application)\n        } else {\n          return [];\n        }\n      })\n      .then((connectors) => {\n        data.connectors = connectors;\n        if (connectors.length > 0 && connectors[0].events.length > 0) {\n          return EditorLogic.getCodeForEvent(request.auth.credentials.application, connectors[0].events[0])\n            .then((code) => {\n              if (code) {\n                return code;\n              } else {\n                return connectors[0].codeForEvent(connectors[0].events[0])\n                  .then((code) => {\n                    if (!code) {\n                      return \"\";\n                    } else {\n                      return code;\n                    }\n                  });\n              }\n            })\n            .then((code) => {\n              this\n                ._logger\n                .info({\n                  codeLength: code.length\n                }, 'got code for event');\n              data.code = {\n                event: connectors[0].events[0].key,\n                script: code\n              }\n            })\n        }\n      })\n      .then(() => {\n        let events = flatten(data.connectors.map((c) => c.events));\n        return EventLogic.getEvents(request.auth.credentials.application.settings)\n          .then((applicationEvents) => {\n            events = events.concat(applicationEvents);\n            data.events = uniq(events, (ev) => ev.key);\n          });\n      })\n      .then(() => {\n        reply(data);\n      });\n  }\n  script(request, reply) {\n    return Promise.resolve()\n      .then(() => {\n        let key = request.params.event;\n        let eventParts = key.split(\":\");\n        let connectorKey = eventParts[0];\n        let eventName = eventParts.slice((eventParts.length - 1) * -1)\n          .join(\":\");\n        if (connectorKey.length < 0) {\n          key = eventName;\n        }\n        return EditorLogic.getCodeForEvent(request.auth.credentials.application, {\n            key: key\n          })\n          .then((module) => {\n            if (!module && connectorKey && connectorKey.length > 0) {\n              return ConnectorLogic.loadConnector(request.auth.credentials.application._id, connectorKey)\n                .then((connector) => {\n                  if (connector) {\n                    return connector.codeForEvent({\n                      name: eventName\n                    });\n                  }\n                })\n            }\n            return module;\n          })\n          .then((code) => {\n            return code || \"\";\n          })\n          .then((code) => {\n            reply({\n              event: key,\n              script: code\n            });\n          });\n      });\n  }\n\n  saveScript(request, reply) {\n    return Promise.resolve()\n      .then(() => {\n        let script = request.payload.code;\n        let eventName = request.params.eventName;\n        let application = request.auth.credentials.application;\n        let organisation = request.auth.credentials.organisation;\n        return EditorLogic.saveScript({\n          eventName,\n          application,\n          organisation,\n          script\n        });\n      })\n      .then(() => {\n        reply({\n          ok: true\n        });\n      })\n  }\n\n  /**\n   * @override\n   * @returns {Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration\n   */\n  routes() {\n    return [\n      {\n        method: 'GET',\n        path: '/editor/state',\n        config: {\n          handler: this.state,\n          auth: {\n            strategy: 'session'\n          }\n        }\n      }, {\n        method: 'GET',\n        path: '/editor/script/{event}',\n        config: {\n          handler: this.script,\n          auth: {\n            strategy: 'session'\n          }\n        }\n      }, {\n        method: 'POST',\n        path: '/editor/script/{eventName}',\n        config: {\n          handler: this.saveScript,\n          auth: {\n            strategy: 'session'\n          }\n        }\n      }\n    ]\n  }\n}\nexport default EditorController;\n"
  },
  {
    "__docId__": 28,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EditorController",
    "memberof": "server/areas/editor/editor_controller.js",
    "longname": "server/areas/editor/editor_controller.js~EditorController",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/areas/editor/editor_controller.js",
    "importStyle": "{EditorController}",
    "description": "Controller for user actions related their Organisations",
    "lineNumber": 18,
    "interface": false,
    "extends": [
      "BaseController"
    ]
  },
  {
    "__docId__": 29,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/areas/editor/editor_controller.js~EditorController",
    "longname": "server/areas/editor/editor_controller.js~EditorController#constructor",
    "access": null,
    "description": "create a new OrganistionController",
    "lineNumber": 22,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "state",
    "memberof": "server/areas/editor/editor_controller.js~EditorController",
    "longname": "server/areas/editor/editor_controller.js~EditorController#state",
    "access": null,
    "description": "gets state data to populate the editor",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "script",
    "memberof": "server/areas/editor/editor_controller.js~EditorController",
    "longname": "server/areas/editor/editor_controller.js~EditorController#script",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "reply",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "saveScript",
    "memberof": "server/areas/editor/editor_controller.js~EditorController",
    "longname": "server/areas/editor/editor_controller.js~EditorController#saveScript",
    "access": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "reply",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "routes",
    "memberof": "server/areas/editor/editor_controller.js~EditorController",
    "longname": "server/areas/editor/editor_controller.js~EditorController#routes",
    "access": null,
    "description": null,
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "an array of route configurations @see http://hapijs.com/api#route-configuration"
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/areas/event/event_controller.js",
    "memberof": null,
    "longname": "server/areas/event/event_controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {BaseController} from '../base_controller';\nimport {ConnectorLogic, EditorLogic, EventLogic} from '../../logic';\n/*\n * Controller for user actions related events\n * @extends {BaseController}\n */\nexport class EventController extends BaseController {\n  /**\n   * create a new OrganistionController\n   */\n  constructor () {\n    super();\n  }\n  /**\n  *\n  */\n  create (request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        return EventLogic.createEvent(request.auth.credentials.application, request.payload.eventName);\n      })\n      .then((eventName) => {\n        return {name: eventName, description: '', key: eventName}\n      })\n      .then((event) => {\n        reply(event);\n      });\n  }\n  /**\n   * @override\n   * @returns {Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration\n   */\n  routes () {\n    return [\n      {\n        method: 'POST',\n        path: '/event',\n        config: {\n          handler: this.create,\n          auth: {\n            strategy: 'session'\n          }\n        }\n      }\n    ]\n  }\n}\nexport default EventController;\n"
  },
  {
    "__docId__": 35,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "EventController",
    "memberof": "server/areas/event/event_controller.js",
    "longname": "server/areas/event/event_controller.js~EventController",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/areas/event/event_controller.js",
    "importStyle": "{EventController}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "server/areas/base_controller~BaseController"
    ]
  },
  {
    "__docId__": 36,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/areas/event/event_controller.js~EventController",
    "longname": "server/areas/event/event_controller.js~EventController#constructor",
    "access": null,
    "description": "create a new OrganistionController",
    "lineNumber": 11,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "create",
    "memberof": "server/areas/event/event_controller.js~EventController",
    "longname": "server/areas/event/event_controller.js~EventController#create",
    "access": null,
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "name": "request",
        "types": [
          "*"
        ]
      },
      {
        "name": "reply",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "routes",
    "memberof": "server/areas/event/event_controller.js~EventController",
    "longname": "server/areas/event/event_controller.js~EventController#routes",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "an array of route configurations @see http://hapijs.com/api#route-configuration"
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/areas/healthcheck/healthcheck_controller.js",
    "memberof": null,
    "longname": "server/areas/healthcheck/healthcheck_controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {BaseController} from '../base_controller';\nimport {_mongoose} from '@hoist/model';\n/**\n * Controller for actions related to healthchecks\n * @extends {BaseController}\n */\nexport class HealthcheckController extends BaseController {\n  /**\n   * create a new HealthcheckController\n   */\n  constructor () {\n    super();\n  }\n\n  /**\n   * simple heartbeat that returns 200 if server and db connection are up and running\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  healthcheck (request, reply) {\n    return new Promise(function (resolve) {\n      var ok = true;\n      var result = {};\n      if (_mongoose.connection.readyState !== 1) {\n        result.db = 'fail';\n        ok = false;\n      } else {\n        result.db = 'pass';\n      }\n      if (ok) {\n        reply(result);\n      } else {\n        var response = reply(result);\n        response.statusCode = 500;\n      }\n      resolve();\n    });\n  }\n\n  /**\n   * @override\n   * @returns {Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration\n   */\n  routes () {\n    return [\n      {\n        method: ['GET'],\n        path: '/healthcheck',\n        config: {\n          handler: this.healthcheck,\n          auth: false\n        }\n      }\n    ]\n  }\n}\nexport default HealthcheckController;\n"
  },
  {
    "__docId__": 40,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "HealthcheckController",
    "memberof": "server/areas/healthcheck/healthcheck_controller.js",
    "longname": "server/areas/healthcheck/healthcheck_controller.js~HealthcheckController",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/areas/healthcheck/healthcheck_controller.js",
    "importStyle": "{HealthcheckController}",
    "description": "Controller for actions related to healthchecks",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "BaseController"
    ]
  },
  {
    "__docId__": 41,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/areas/healthcheck/healthcheck_controller.js~HealthcheckController",
    "longname": "server/areas/healthcheck/healthcheck_controller.js~HealthcheckController#constructor",
    "access": null,
    "description": "create a new HealthcheckController",
    "lineNumber": 11,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 42,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "healthcheck",
    "memberof": "server/areas/healthcheck/healthcheck_controller.js~HealthcheckController",
    "longname": "server/areas/healthcheck/healthcheck_controller.js~HealthcheckController#healthcheck",
    "access": null,
    "description": "simple heartbeat that returns 200 if server and db connection are up and running",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "routes",
    "memberof": "server/areas/healthcheck/healthcheck_controller.js~HealthcheckController",
    "longname": "server/areas/healthcheck/healthcheck_controller.js~HealthcheckController#routes",
    "access": null,
    "description": null,
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "an array of route configurations @see http://hapijs.com/api#route-configuration"
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/areas/organisation/organisation_controller.js",
    "memberof": null,
    "longname": "server/areas/organisation/organisation_controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {BaseController} from '../base_controller';\nimport {Organisation, HoistUser, Session} from '@hoist/model';\nimport errors from '@hoist/errors';\nimport {StringUtils} from '../../utils';\n/**\n * Controller for user actions related their Organisations\n * @extends {BaseController}\n */\nexport class OrganisationController extends BaseController {\n  /**\n   * create a new OrganistionController\n   */\n  constructor () {\n    super();\n  }\n  _createSlugFromName (name, postfix = '') {\n    name = StringUtils.sanitiseName(name);\n    return Organisation\n      .countAsync({\n      slug: name + postfix\n    })\n      .then((count) => {\n        if (count > 0) {\n          //colision so add number\n          return this._createSlugFromName(name, Math.floor(Math.random() * 10000));\n        }\n        return name + postfix;\n      });\n  }\n\n  /**\n   * create a Organisation\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  create (request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        if (!request.payload.name || request.payload.name.length < 1) {\n          throw new errors.Http400Error('Organisation Name must be supplied');\n        }\n      })\n      .then(() => {\n        return this\n          ._createSlugFromName(request.payload.name)\n          .then((slug) => {\n            return {name: request.payload.name, slug}\n          });\n      })\n      .then(organisationDetails => {\n        return new Organisation(organisationDetails).saveAsync();\n      })\n      .then((organisation) => {\n        if (organisation.length) {\n          organisation = organisation[0];\n        }\n        return HoistUser.updateAsync({\n          _id: request.auth.credentials.user._id\n        }, {\n          $push: {\n            organisations: organisation._id\n          }\n        }).then(() => {\n          return {_id: organisation._id, slug: organisation.slug, name: organisation.name, isPersonal: organisation.isPersonal};\n        });\n      })\n      .then((organisation) => {\n        reply(organisation).code(201);\n        return Session.updateAsync({\n          _id: request.auth.credentials._id\n        }, {\n          $set: {\n            organisation: organisation._id\n          }\n        });\n      });\n  }\n\n  /**\n   * returns the organisation details represented by the slug of the request\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  fetch (request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        return Organisation.findOneAsync({\n          _id: {\n            $in: request.auth.credentials.user.organisations\n          },\n          slug: request.params.slug\n        });\n      })\n      .then((organisation) => {\n        if (!organisation) {\n          throw new errors.Http404Error('Organisation could not be found');\n        } else {\n          reply(organisation);\n        }\n      });\n  }\n\n  /**\n   * @override\n   * @returns {Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration\n   */\n  routes () {\n    return [\n      {\n        method: ['POST'],\n        path: '/organisation',\n        config: {\n          handler: this.create,\n          auth: {\n            strategy: 'session'\n          }\n        }\n      }, {\n        method: ['GET'],\n        path: '/organisation/{slug}',\n        config: {\n          handler: this.fetch,\n          auth: {\n            strategy: 'session'\n          }\n        }\n      }\n    ]\n  }\n}\nexport default OrganisationController;\n"
  },
  {
    "__docId__": 45,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "OrganisationController",
    "memberof": "server/areas/organisation/organisation_controller.js",
    "longname": "server/areas/organisation/organisation_controller.js~OrganisationController",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/areas/organisation/organisation_controller.js",
    "importStyle": "{OrganisationController}",
    "description": "Controller for user actions related their Organisations",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "BaseController"
    ]
  },
  {
    "__docId__": 46,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/areas/organisation/organisation_controller.js~OrganisationController",
    "longname": "server/areas/organisation/organisation_controller.js~OrganisationController#constructor",
    "access": null,
    "description": "create a new OrganistionController",
    "lineNumber": 13,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_createSlugFromName",
    "memberof": "server/areas/organisation/organisation_controller.js~OrganisationController",
    "longname": "server/areas/organisation/organisation_controller.js~OrganisationController#_createSlugFromName",
    "access": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "postfix",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "create",
    "memberof": "server/areas/organisation/organisation_controller.js~OrganisationController",
    "longname": "server/areas/organisation/organisation_controller.js~OrganisationController#create",
    "access": null,
    "description": "create a Organisation",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "fetch",
    "memberof": "server/areas/organisation/organisation_controller.js~OrganisationController",
    "longname": "server/areas/organisation/organisation_controller.js~OrganisationController#fetch",
    "access": null,
    "description": "returns the organisation details represented by the slug of the request",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "routes",
    "memberof": "server/areas/organisation/organisation_controller.js~OrganisationController",
    "longname": "server/areas/organisation/organisation_controller.js~OrganisationController#routes",
    "access": null,
    "description": null,
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "an array of route configurations @see http://hapijs.com/api#route-configuration"
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/areas/session/session_controller.js",
    "memberof": null,
    "longname": "server/areas/session/session_controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {BaseController} from '../base_controller';\nimport errors from '@hoist/errors';\nimport {SessionLogic} from '../../logic';\n\n/**\n * Controller for user actions related their current session\n * @extends {BaseController}\n */\nexport class SessionController extends BaseController {\n  /**\n   * create a new SessionController\n   */\n  constructor () {\n    super();\n  }\n\n  /**\n   * create a new session for the user, sign them out of any existing session on post\n   * The following happens in this request\n   * 1) the IP address of the request is checked to ensure it isn't locked (through too many successive incorrect login attempts)\n   * 2) the parameters supplied are checked for validity\n   * 3) the user with a matching email address is found\n   * 4) the user is checked for lock based on login attempts against username\n   * 5) the password is checked\n   * 6) the last user session is loaded\n   * 7) the current org and application are set from last session\n   * 8) the list of users organisations and applications are loaded\n   * 9) the session is created and saved\n   * 10) a response is sent to the user\n   * 11) a login log and ip log entry are created and saved\n   * On failure of any of the above steps\n   * 1) a login log and ip log entry are saved\n   * 2) an error response is sent to the user\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  create (request, reply) {\n    let ipAddress = request.headers['x-real-ip']\n      ? request.headers['x-real-ip']\n      : request.info.remoteAddress;\n    let payload = request.payload || {};\n    let email = payload.email;\n    let password = payload.password;\n    return Promise\n      .resolve()\n      .then(() => SessionLogic.ensureLogin({email, password, ipAddress}))\n      .then((user) => SessionLogic.createSessionForUser(user))\n      .then((session) => {\n        //set the current user session\n        request\n          .cookieAuth\n          .set(session);\n        return SessionLogic.getSessionDetails(session);\n      })\n      .then((sessionDetails) => reply(sessionDetails))\n      .then(() => {\n        return SessionLogic.logLogin({\n          email,\n          password,\n          ipAddress\n        }, true);\n      })\n      .catch((err) => {\n        return SessionLogic.logLogin({\n          email,\n          password,\n          ipAddress\n        }, false).then(() => {\n          return this._onRequestError(request, reply, err);\n        });\n      });\n  }\n\n  /**\n   * destroy any existing session for the user\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  destroy (request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        if (request.auth.isAuthenticated) {\n          request\n            .cookieAuth\n            .clear();\n        }\n        reply({ok: true});\n      });\n  }\n\n  /**\n   * get current session details\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  current (request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        if (request.auth.isAuthenticated) {\n          return SessionLogic\n            .getSessionDetails(request.auth.credentials)\n            .then(sessionDetails => reply(sessionDetails));\n        } else {\n          throw new errors.Http401Error();\n        }\n      })\n      .catch((err) => {\n        return this._onRequestError(err);\n      });\n  }\n\n  /**\n   * updates the current organisation on the session and saves the session changes\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  updateOrganisation (request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        return SessionLogic.updateOrganisation(request.auth.credentials, request.payload._id);\n      })\n      .then((sessionDetails) => {\n        reply(sessionDetails);\n      });\n  }\n\n  /**\n   * updates the current organisation on the session and saves the session changes\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  updateApplication (request, reply) {\n    return Promise\n      .resolve()\n      .then(() => {\n        return SessionLogic.updateApplication(request.auth.credentials, request.payload._id);\n      })\n      .then((sessionDetails) => {\n        reply(sessionDetails);\n      });\n  }\n\n  /**\n   * @override\n   * @returns {Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration\n   */\n  routes () {\n    return [\n      {\n        method: 'POST',\n        path: '/session',\n        config: {\n          handler: this.create,\n          auth: {\n            mode: 'try',\n            strategy: 'session'\n          },\n          plugins: {\n            'hapi-auth-cookie': {\n              redirectTo: false\n            }\n          }\n        }\n      }, {\n        method: 'POST',\n        path: '/session/organisation',\n        config: {\n          handler: this.updateOrganisation,\n          auth: {\n            strategy: 'session'\n          },\n          plugins: {\n            'hapi-auth-cookie': {\n              redirectTo: false\n            }\n          }\n        }\n      }, {\n        method: 'POST',\n        path: '/session/application',\n        config: {\n          handler: this.updateApplication,\n          auth: {\n            strategy: 'session'\n          },\n          plugins: {\n            'hapi-auth-cookie': {\n              redirectTo: false\n            }\n          }\n        }\n      }, {\n        method: 'DELETE',\n        path: '/session',\n        config: {\n          handler: this.destroy,\n          auth: {\n            strategy: 'session',\n            mode: 'try'\n          },\n          plugins: {\n            'hapi-auth-cookie': {\n              redirectTo: false\n            }\n          }\n        }\n      }, {\n        method: 'GET',\n        path: '/session',\n        config: {\n          handler: this.current,\n          auth: {\n            strategy: 'session'\n          },\n          plugins: {\n            'hapi-auth-cookie': {\n              redirectTo: false\n            }\n          }\n        }\n      }\n    ]\n  }\n}\nexport default SessionController;\n"
  },
  {
    "__docId__": 52,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "SessionController",
    "memberof": "server/areas/session/session_controller.js",
    "longname": "server/areas/session/session_controller.js~SessionController",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/areas/session/session_controller.js",
    "importStyle": "{SessionController}",
    "description": "Controller for user actions related their current session",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "BaseController"
    ]
  },
  {
    "__docId__": 53,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/areas/session/session_controller.js~SessionController",
    "longname": "server/areas/session/session_controller.js~SessionController#constructor",
    "access": null,
    "description": "create a new SessionController",
    "lineNumber": 13,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "create",
    "memberof": "server/areas/session/session_controller.js~SessionController",
    "longname": "server/areas/session/session_controller.js~SessionController#create",
    "access": null,
    "description": "create a new session for the user, sign them out of any existing session on post\nThe following happens in this request\n1) the IP address of the request is checked to ensure it isn't locked (through too many successive incorrect login attempts)\n2) the parameters supplied are checked for validity\n3) the user with a matching email address is found\n4) the user is checked for lock based on login attempts against username\n5) the password is checked\n6) the last user session is loaded\n7) the current org and application are set from last session\n8) the list of users organisations and applications are loaded\n9) the session is created and saved\n10) a response is sent to the user\n11) a login log and ip log entry are created and saved\nOn failure of any of the above steps\n1) a login log and ip log entry are saved\n2) an error response is sent to the user",
    "lineNumber": 38,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "destroy",
    "memberof": "server/areas/session/session_controller.js~SessionController",
    "longname": "server/areas/session/session_controller.js~SessionController#destroy",
    "access": null,
    "description": "destroy any existing session for the user",
    "lineNumber": 81,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "current",
    "memberof": "server/areas/session/session_controller.js~SessionController",
    "longname": "server/areas/session/session_controller.js~SessionController#current",
    "access": null,
    "description": "get current session details",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateOrganisation",
    "memberof": "server/areas/session/session_controller.js~SessionController",
    "longname": "server/areas/session/session_controller.js~SessionController#updateOrganisation",
    "access": null,
    "description": "updates the current organisation on the session and saves the session changes",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "updateApplication",
    "memberof": "server/areas/session/session_controller.js~SessionController",
    "longname": "server/areas/session/session_controller.js~SessionController#updateApplication",
    "access": null,
    "description": "updates the current organisation on the session and saves the session changes",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "routes",
    "memberof": "server/areas/session/session_controller.js~SessionController",
    "longname": "server/areas/session/session_controller.js~SessionController#routes",
    "access": null,
    "description": null,
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "an array of route configurations @see http://hapijs.com/api#route-configuration"
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/areas/user/user_controller.js",
    "memberof": null,
    "longname": "server/areas/user/user_controller.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {\n  BaseController\n} from '../base_controller';\nimport errors from '@hoist/errors';\nimport {\n  UserLogic,\n  SessionLogic\n} from '../../logic';\n\n/**\n * Controller for actions related to users\n * @extends {BaseController}\n */\nexport class UserController extends BaseController {\n  /**\n   * create a new UserController\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * create a new User and sign the user in\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  create(request, reply) {\n    let ipAddress = request.headers['x-real-ip'] ? request.headers['x-real-ip'] : request.info.remoteAddress;\n    let payload = request.payload || {};\n    let email = payload.email;\n    let username = payload.username;\n    let password = payload.password;\n    let passwordCheck = payload['password-repeat'];\n    return Promise\n      .resolve()\n      .then(() => UserLogic.create({\n        username,\n        email,\n        password,\n        passwordCheck\n      }))\n      .then((user) => SessionLogic.createSessionForUser(user))\n      .then((session) => {\n        //set the current user session\n        request\n          .cookieAuth\n          .set(session);\n        return SessionLogic.getSessionDetails(session);\n      })\n      .then((sessionDetails) => reply(sessionDetails))\n      .then(() => {\n        return SessionLogic.logLogin({\n          email,\n          password,\n          ipAddress\n        }, true);\n      })\n      .catch((err) => {\n        return SessionLogic.logLogin({\n            email,\n            password,\n            ipAddress\n          }, false)\n          .then(() => {\n            return this._onRequestError(request, reply, err);\n          });\n      });\n  }\n\n  /**\n   * create a new Forgotten Password request\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  generateForgottenPassword(request, reply) {\n    return Promise.resolve()\n      .then(() => {\n        let email = request.payload.email;\n        return UserLogic.createForgottenPassword({\n          email\n        });\n      })\n      .then(() => {\n        reply({\n          ok: true\n        });\n      });\n  }\n\n  /**\n   * resets a user password linked to a forgotten password request\n   * @param {HapiRequest} request - the login HTTP request\n   * @param {HapiReply} reply - the reply to send to the user\n   * @return {Promise}\n   */\n  activateForgottenPassword(request, reply) {\n    return Promise.resolve()\n      .then(() => {\n        let password = request.payload.password;\n        let passwordCheck = request.payload['password-repeat'];\n        let activationCode = request.params.activationCode;\n        return UserLogic.activateForgottenPassword({\n          password,\n          passwordCheck,\n          activationCode\n        });\n      })\n      .then(() => {\n        reply({\n          ok: true\n        });\n      });\n  }\n\n  /**\n   * @override\n   * @returns {Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration\n   */\n  routes() {\n    return [\n      {\n        method: 'POST',\n        path: '/user',\n        config: {\n          handler: this.create,\n          auth: {\n            mode: 'try',\n            strategy: 'session'\n          },\n          plugins: {\n            'hapi-auth-cookie': {\n              redirectTo: false\n            }\n          }\n        }\n      }, {\n        method: 'POST',\n        path: '/user/forgot-password',\n        config: {\n          handler: this.generateForgottenPassword,\n          auth: {\n            mode: 'try',\n            strategy: 'session'\n          },\n          plugins: {\n            'hapi-auth-cookie': {\n              redirectTo: false\n            }\n          }\n        }\n      },\n      {\n        method: 'POST',\n        path: '/user/forgot-password/{activationCode}',\n        config: {\n          handler: this.activateForgottenPassword,\n          auth: {\n            mode: 'try',\n            strategy: 'session'\n          },\n          plugins: {\n            'hapi-auth-cookie': {\n              redirectTo: false\n            }\n          }\n        }\n      }]\n  }\n}\nexport\ndefault UserController;\n"
  },
  {
    "__docId__": 61,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "UserController",
    "memberof": "server/areas/user/user_controller.js",
    "longname": "server/areas/user/user_controller.js~UserController",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/areas/user/user_controller.js",
    "importStyle": "{UserController}",
    "description": "Controller for actions related to users",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "BaseController"
    ]
  },
  {
    "__docId__": 62,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/areas/user/user_controller.js~UserController",
    "longname": "server/areas/user/user_controller.js~UserController#constructor",
    "access": null,
    "description": "create a new UserController",
    "lineNumber": 18,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "create",
    "memberof": "server/areas/user/user_controller.js~UserController",
    "longname": "server/areas/user/user_controller.js~UserController#create",
    "access": null,
    "description": "create a new User and sign the user in",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "generateForgottenPassword",
    "memberof": "server/areas/user/user_controller.js~UserController",
    "longname": "server/areas/user/user_controller.js~UserController#generateForgottenPassword",
    "access": null,
    "description": "create a new Forgotten Password request",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 65,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "activateForgottenPassword",
    "memberof": "server/areas/user/user_controller.js~UserController",
    "longname": "server/areas/user/user_controller.js~UserController#activateForgottenPassword",
    "access": null,
    "description": "resets a user password linked to a forgotten password request",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "HapiRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": "the login HTTP request"
      },
      {
        "nullable": null,
        "types": [
          "HapiReply"
        ],
        "spread": false,
        "optional": false,
        "name": "reply",
        "description": "the reply to send to the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "routes",
    "memberof": "server/areas/user/user_controller.js~UserController",
    "longname": "server/areas/user/user_controller.js~UserController#routes",
    "access": null,
    "description": null,
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} - an array of route configurations @see http://hapijs.com/api#route-configuration"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "an array of route configurations @see http://hapijs.com/api#route-configuration"
    },
    "override": true,
    "generator": false
  },
  {
    "__docId__": 67,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/configuration/authentication.js",
    "memberof": null,
    "longname": "server/configuration/authentication.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {BaseConfigurator} from './base_configurator';\nimport config from 'config';\nimport HapiAuthCookie from 'hapi-auth-cookie';\nimport {Session} from '@hoist/model';\n/* istanbul ignore next */\nexport class AuthenticationConfigurator extends BaseConfigurator {\n  configure (hapiServer) {\n    return Promise\n      .resolve()\n      .then(() => {\n        return hapiServer.registerAsync(HapiAuthCookie)\n      })\n      .then(() => {\n        return hapiServer\n          .auth\n          .strategy('session', 'cookie', {\n            password: config.get('Hoist.cookies.beta.password'),\n            cookie: config.get('Hoist.cookies.beta.name'),\n            redirectTo: '/session/create',\n            isSecure: config.get('Hoist.cookies.beta.secure'),\n            validateFunc: (request, session, callback) => {\n              return Promise\n                .resolve(Session.findOne({_id: session._id, isValid: true}).populate({path: 'organisation'}).populate({path: 'user'}).populate({path: 'application'}).exec())\n                .then((loadedSession) => {\n                  callback(null, !!(loadedSession), loadedSession);\n                })\n                .catch((err) => {\n                  callback(err);\n                });\n            }\n          });\n      })\n  }\n}\n"
  },
  {
    "__docId__": 68,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "AuthenticationConfigurator",
    "memberof": "server/configuration/authentication.js",
    "longname": "server/configuration/authentication.js~AuthenticationConfigurator",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/configuration/authentication.js",
    "importStyle": "{AuthenticationConfigurator}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "server/configuration/base_configurator~BaseConfigurator"
    ]
  },
  {
    "__docId__": 69,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configure",
    "memberof": "server/configuration/authentication.js~AuthenticationConfigurator",
    "longname": "server/configuration/authentication.js~AuthenticationConfigurator#configure",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 70,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/configuration/base_configurator.js",
    "memberof": null,
    "longname": "server/configuration/base_configurator.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import logger from '@hoist/logger';\n/* istanbul ignore next */\nexport class BaseConfigurator {\n  constructor () {\n    this._logger = logger.child({cls: this.constructor.name});\n  }\n  configure () {\n    return Promise.resolve();\n  }\n}\n"
  },
  {
    "__docId__": 71,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "BaseConfigurator",
    "memberof": "server/configuration/base_configurator.js",
    "longname": "server/configuration/base_configurator.js~BaseConfigurator",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/configuration/base_configurator.js",
    "importStyle": "{BaseConfigurator}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/configuration/base_configurator.js~BaseConfigurator",
    "longname": "server/configuration/base_configurator.js~BaseConfigurator#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 73,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_logger",
    "memberof": "server/configuration/base_configurator.js~BaseConfigurator",
    "longname": "server/configuration/base_configurator.js~BaseConfigurator#_logger",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configure",
    "memberof": "server/configuration/base_configurator.js~BaseConfigurator",
    "longname": "server/configuration/base_configurator.js~BaseConfigurator#configure",
    "access": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 75,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/configuration/index.js",
    "memberof": null,
    "longname": "server/configuration/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nimport {RouteConfigurator} from './routes';\nimport {ServerConfigurator} from './server';\nimport {AuthenticationConfigurator} from './authentication';\nimport {LoggingConfigurator} from './logging';\nexport default {\n  routes: new RouteConfigurator(),\n  server: new ServerConfigurator(),\n  auth: new AuthenticationConfigurator(),\n  logging: new LoggingConfigurator()\n}\n"
  },
  {
    "__docId__": 76,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/configuration/logging.js",
    "memberof": null,
    "longname": "server/configuration/logging.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {BaseConfigurator} from './base_configurator';\nimport path from 'path';\nimport HapiBunyan from 'hapi-bunyan';\nimport poop from 'poop';\nimport logger from '@hoist/logger';\nimport good from 'good';\nimport goodConsole from 'good-console';\n/* istanbul ignore next */\nexport class LoggingConfigurator extends BaseConfigurator {\n  configure (hapiServer) {\n    return Promise\n      .resolve()\n      .then(() => {\n        return hapiServer.registerAsync({\n          register: HapiBunyan,\n          options: {\n            logger: logger.child({cls: 'HAPI_CORE'})\n          }\n        });\n      })\n      .then(() => {\n        return hapiServer.registerAsync({\n          register: poop,\n          options: {\n            logPath: path.join(process.cwd(), 'poop.log')\n          }\n        });\n      })\n      .then(() => {\n        return hapiServer.registerAsync({\n          register: good,\n          options: {\n            opsInterval: 1000,\n            reporters: [\n              {\n                reporter: goodConsole,\n                events: {\n                  log: '*',\n                  response: '*'\n                }\n              }\n            ]\n          }\n        });\n      })\n  }\n}\n"
  },
  {
    "__docId__": 77,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "LoggingConfigurator",
    "memberof": "server/configuration/logging.js",
    "longname": "server/configuration/logging.js~LoggingConfigurator",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/configuration/logging.js",
    "importStyle": "{LoggingConfigurator}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "server/configuration/base_configurator~BaseConfigurator"
    ]
  },
  {
    "__docId__": 78,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configure",
    "memberof": "server/configuration/logging.js~LoggingConfigurator",
    "longname": "server/configuration/logging.js~LoggingConfigurator#configure",
    "access": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 79,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/configuration/routes.js",
    "memberof": null,
    "longname": "server/configuration/routes.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nimport {BaseConfigurator} from './base_configurator';\nimport path from 'path';\nimport glob from 'glob';\nimport Bluebird from 'bluebird';\nimport {BaseController} from '../areas/base_controller'\nimport {SessionLogic, SettingsLogic} from '../logic';\nimport config from 'config';\nimport Boom from 'boom';\nimport {Session} from '@hoist/model';\nlet globAsync = Bluebird.promisify(glob);\n/* istanbul ignore next */\nexport class RouteConfigurator extends BaseConfigurator {\n  constructor() {\n    super();\n  }\n  configure(hapiServer) {\n    return this\n      .mapControllerRoutes(hapiServer)\n      .then(() => this.mapStaticRoutes(hapiServer))\n      .then(() => this.mapDefaultRoute(hapiServer));\n  }\n  mapStaticRoutes(hapiServer) {\n    return hapiServer.route([\n      {\n        method: 'GET',\n        path: '/js/{param*}',\n        handler: {\n          directory: {\n            path: path.resolve(process.cwd(), './lib/client'),\n            redirectToSlash: true,\n            index: false\n          }\n        }\n      }, {\n        method: 'GET',\n        path: '/img/{param*}',\n        handler: {\n          directory: {\n            path: path.resolve(process.cwd(), './lib/assets/img'),\n            redirectToSlash: true,\n            index: false\n          }\n        }\n      }\n    ]);\n  }\n  mapDefaultRoute(hapiServer) {\n    return hapiServer.route([\n      {\n        method: [\n          'GET', 'POST', 'PUT', 'PATCH', 'DELETE'\n        ],\n        path: '/api/{p*}',\n        config: {\n          handler: (request, reply) => {\n            reply(Boom.notFound())\n          }\n        }\n      }, {\n        method: 'GET',\n        path: '/{p*}',\n        config: {\n          auth: {\n            mode: 'try',\n            strategy: 'session'\n          },\n          plugins: {\n            'hapi-auth-cookie': {\n              redirectTo: false\n            }\n          },\n          handler: (request, reply) => {\n            return Promise\n              .resolve()\n              .then(() => {\n                if (request.auth.isAuthenticated && request.auth.credentials._id) {\n                  return SessionLogic.getSessionDetails(request.auth.credentials);\n                }\n                return {};\n              })\n              .then((state) => {\n                return SettingsLogic\n                  .getAllSettings()\n                  .then((settings) => {\n                    return Object.assign({}, state, settings);\n                  });\n              })\n              .then((state) => {\n                let settings = {\n                  domains: config.get('Hoist.domains')\n                };\n                reply.view('index', {\n                  HoistConfig: config.get('Hoist'),\n                  initialState: Object.assign({}, state, {\n                    session: {\n                      isValid: request.auth.isAuthenticated && !!(request.auth.credentials)\n                    }\n                  }, {settings})\n                });\n              })\n              .catch((err) => {\n                this\n                  ._logger\n                  .alert(err);\n                this\n                  ._logger\n                  .error(err);\n                reply(Boom.wrap(err));\n              });\n          }\n        }\n      }\n    ])\n  }\n  mapControllerRoutes(hapiServer) {\n    return globAsync('../areas/**/*_controller.js', {cwd: __dirname}).then((controllersPaths) => {\n      return controllersPaths.filter((controllerPath) => {\n        return !controllerPath.endsWith('base_controller.js');\n      }).map((controllerPath) => {\n        let Controller = require(controllerPath).default;\n        return new Controller();\n      });\n    }).then((controllers) => {\n      return Promise.all(controllers.filter((controller) => {\n        return (controller instanceof BaseController);\n      }).map((controller) => {\n        return controller._loadRoutes(hapiServer);\n      })).then(() => {});\n    });\n\n  }\n}\n"
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "globAsync",
    "memberof": "server/configuration/routes.js",
    "longname": "server/configuration/routes.js~globAsync",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/configuration/routes.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "RouteConfigurator",
    "memberof": "server/configuration/routes.js",
    "longname": "server/configuration/routes.js~RouteConfigurator",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/configuration/routes.js",
    "importStyle": "{RouteConfigurator}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false,
    "extends": [
      "server/configuration/base_configurator~BaseConfigurator"
    ]
  },
  {
    "__docId__": 82,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/configuration/routes.js~RouteConfigurator",
    "longname": "server/configuration/routes.js~RouteConfigurator#constructor",
    "access": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 83,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configure",
    "memberof": "server/configuration/routes.js~RouteConfigurator",
    "longname": "server/configuration/routes.js~RouteConfigurator#configure",
    "access": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 84,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mapStaticRoutes",
    "memberof": "server/configuration/routes.js~RouteConfigurator",
    "longname": "server/configuration/routes.js~RouteConfigurator#mapStaticRoutes",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 85,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mapDefaultRoute",
    "memberof": "server/configuration/routes.js~RouteConfigurator",
    "longname": "server/configuration/routes.js~RouteConfigurator#mapDefaultRoute",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 86,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "mapControllerRoutes",
    "memberof": "server/configuration/routes.js~RouteConfigurator",
    "longname": "server/configuration/routes.js~RouteConfigurator#mapControllerRoutes",
    "access": null,
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 87,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/configuration/server.js",
    "memberof": null,
    "longname": "server/configuration/server.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nimport {BaseConfigurator} from './base_configurator';\nimport config from 'config';\nimport vision from 'vision';\n//import WebpackConfig from '../../../config/webpack/webpack.config';\nimport handlebars from 'handlebars';\nimport path from 'path';\nimport inert from 'inert';\n//const compiler = Webpack(WebpackConfig);\n/* istanbul ignore next */\nexport class ServerConfigurator extends BaseConfigurator {\n  constructor () {\n    super();\n  }\n  configure (hapiServer) {\n    return Promise\n      .resolve()\n      .then(() => this._configureMainConnection(hapiServer))\n      .then(() => this._configureWebpack(hapiServer))\n      .then(() => this._configureViewEngine(hapiServer))\n  }\n\n  _configureMainConnection (hapiServer) {\n    return hapiServer.connection({host: '0.0.0.0', port: 8000});\n  }\n  _configureWebpack (hapiServer) {\n    if (!config.get('Hoist.webpack.optimize')) {\n      let Webpack = require('webpack');\n      let webpackConfig = require('../../../config/webpack/webpack.config');\n      let compiler = Webpack(webpackConfig);\n      return hapiServer.registerAsync({\n        register: require('hapi-webpack-plugin'),\n        options: {\n          compiler: compiler,\n          hot: {},\n          assets: webpackConfig.assets\n        }\n      });\n      // Do \"hot-reloading\" of react stuff on the server\n      // Throw away the cached client modules and let them be re-required next time\n      compiler.plugin('done', function () {\n        Object\n          .keys(require.cache)\n          .forEach(function (id) {\n            if (/\\/client\\//.test(id))\n              delete require.cache[id];\n            }\n          );\n      });\n    }\n  }\n  _configureViewEngine (hapiServer) {\n    return hapiServer\n      .registerAsync(vision)\n      .then(() => {\n        handlebars.registerHelper('json', JSON.stringify);\n        return hapiServer.views({\n          engines: {\n            hbs: handlebars\n          },\n          isCached: false,\n          relativeTo: path.resolve(__dirname, '../'),\n          path: 'views'\n        })\n      })\n      .then(() => hapiServer.registerAsync(inert));\n  }\n}\n"
  },
  {
    "__docId__": 88,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ServerConfigurator",
    "memberof": "server/configuration/server.js",
    "longname": "server/configuration/server.js~ServerConfigurator",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/configuration/server.js",
    "importStyle": "{ServerConfigurator}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "server/configuration/base_configurator~BaseConfigurator"
    ]
  },
  {
    "__docId__": 89,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/configuration/server.js~ServerConfigurator",
    "longname": "server/configuration/server.js~ServerConfigurator#constructor",
    "access": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 90,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "configure",
    "memberof": "server/configuration/server.js~ServerConfigurator",
    "longname": "server/configuration/server.js~ServerConfigurator#configure",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 91,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_configureMainConnection",
    "memberof": "server/configuration/server.js~ServerConfigurator",
    "longname": "server/configuration/server.js~ServerConfigurator#_configureMainConnection",
    "access": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 92,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_configureWebpack",
    "memberof": "server/configuration/server.js~ServerConfigurator",
    "longname": "server/configuration/server.js~ServerConfigurator#_configureWebpack",
    "access": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 93,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_configureViewEngine",
    "memberof": "server/configuration/server.js~ServerConfigurator",
    "longname": "server/configuration/server.js~ServerConfigurator#_configureViewEngine",
    "access": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "hapiServer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 94,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/index.js",
    "memberof": null,
    "longname": "server/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict';\nimport {Server as HapiServer} from 'hapi';\nimport Bluebird from 'bluebird';\nimport configurators from './configuration';\nimport logger from '@hoist/logger';\nimport hapi from 'hapi';\nimport config from 'config';\nimport {_mongoose} from '@hoist/model';\n_mongoose.set('debug', true);\n/**\n * The main portal server itself\n */\n\nexport default class PortalServer {\n  /**\n   * create a new portal server\n   */\n  constructor () {\n    this._logger = logger.child({cls: this.constructor.name});\n  }\n  _createServer () {\n    return Promise\n      .resolve()\n      .then(() => {\n        this._hapiServer = new HapiServer();\n        Bluebird.promisifyAll(this._hapiServer);\n      })\n      .then(() => configurators.server.configure(this._hapiServer))\n      .then(() => configurators.logging.configure(this._hapiServer))\n      .then(() => configurators.auth.configure(this._hapiServer))\n      .then(() => configurators.routes.configure(this._hapiServer))\n      .then(() => this._hapiServer);\n  }\n\n  /**\n   * start the server and connect to mongo\n   * @returns {Promise} - for the server to have started\n   */\n  start () {\n    return _mongoose\n      .connectAsync(config.get('Hoist.mongo.core.connectionString'))\n      .then(() => this._createServer())\n      .then(() => this._hapiServer.startAsync())\n      .then(() => {\n        this\n          ._logger\n          .info({\n            info: this._hapiServer.info\n          }, 'server listening')\n      })\n      .catch((err) => {\n        this\n          ._logger\n          .error(err);\n        this\n          ._logger\n          .alert(err);\n      });\n  }\n}\n"
  },
  {
    "__docId__": 95,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "PortalServer",
    "memberof": "server/index.js",
    "longname": "server/index.js~PortalServer",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/index.js",
    "importStyle": "PortalServer",
    "description": "The main portal server itself",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/index.js~PortalServer",
    "longname": "server/index.js~PortalServer#constructor",
    "access": null,
    "description": "create a new portal server",
    "lineNumber": 18,
    "params": [],
    "generator": false
  },
  {
    "__docId__": 97,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_logger",
    "memberof": "server/index.js~PortalServer",
    "longname": "server/index.js~PortalServer#_logger",
    "access": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_createServer",
    "memberof": "server/index.js~PortalServer",
    "longname": "server/index.js~PortalServer#_createServer",
    "access": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 99,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_hapiServer",
    "memberof": "server/index.js~PortalServer",
    "longname": "server/index.js~PortalServer#_hapiServer",
    "access": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "start",
    "memberof": "server/index.js~PortalServer",
    "longname": "server/index.js~PortalServer#start",
    "access": null,
    "description": "start the server and connect to mongo",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - for the server to have started"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "for the server to have started"
    },
    "generator": false
  },
  {
    "__docId__": 101,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/application.js",
    "memberof": null,
    "longname": "server/logic/application.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import config from 'config';\nimport Promise from 'bluebird';\nimport fs from 'fs';\nimport path from 'path';\nimport {Application} from '@hoist/model';\nimport slugify from 'slug';\n\nPromise.promisifyAll(fs);\n\nexport function getApplicationPath(application) {\n  return Promise\n    .resolve()\n    .then(() => {\n      if (!application.populated('organisation')) {\n        return application\n          .populate({path: 'organisation', select: 'slug'})\n          .execPopulate()\n      }\n    })\n    .then(() => {\n      return path.join(config.get('Hoist.filePaths.deploys'), application.organisation.slug, application.slug, 'current');\n    })\n    .then((currentPath) => {\n      if (fs.existsSync(currentPath)) {\n        return fs.realpathAsync(currentPath);\n      } else {\n        return currentPath;\n      }\n    });\n}\nexport function create({\n  name,\n  organisation,\n  slug = null\n}) {\n  return Promise\n    .resolve(slugify(slug || name))\n    .then(slug => {\n      return new Application({name, organisation, slug})\n        .saveAsync();\n    });\n}\n"
  },
  {
    "__docId__": 102,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getApplicationPath",
    "memberof": "server/logic/application.js",
    "longname": "server/logic/application.js~getApplicationPath",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/application.js",
    "importStyle": "{getApplicationPath}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "application",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 103,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "create",
    "memberof": "server/logic/application.js",
    "longname": "server/logic/application.js~create",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/application.js",
    "importStyle": "{create}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"name\": *, \"organisation\": *, \"slug\": *}"
        ],
        "defaultRaw": {
          "name": null,
          "organisation": null,
          "slug": null
        },
        "defaultValue": "{\"name\":null,\"organisation\":null,\"slug\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 104,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/connector.js",
    "memberof": null,
    "longname": "server/logic/connector.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {\n  ConnectorSetting\n} from '@hoist/model';\nimport fs from 'fs';\nimport Bluebird from 'bluebird';\nimport logger from '@hoist/logger';\nimport path from 'path';\nimport config from 'config';\nimport url from 'url';\nimport r from 'request';\nBluebird.promisifyAll(r);\nBluebird.promisifyAll(fs);\nconst _logger = logger.child({\n  cls: 'ConnectorLogic'\n});\n/**\n * returns all connnectors for this application\n * @param {string} applicationId - the id of the application to use\n * @returns {Promise<Array<ConnectorViewModel>>} - the connectors\n */\nexport function getConnectorsForApplication(applicationId) {\n  return Promise\n    .resolve(ConnectorSetting.findAsync({\n      application: applicationId\n    }))\n    .then((connectorSettings) => Promise.all(connectorSettings.map(connectorSetting => populateConnector(connectorSetting))));\n}\n/**\n * given a connector setting, returns an object loading up the settings and the events that come from the connector\n * @param {ConnectorSetting} connectorSetting - the connector setting to populate\n * @returns {Promise<ConnectorViewModel>} - the connector view model\n */\nexport function populateConnector(connectorSetting) {\n  let ConnectorViewModel = require('../models/connector_view_model')\n    .ConnectorViewModel;\n  return Promise\n    .resolve()\n    .then(() => {\n      let model = new ConnectorViewModel(connectorSetting);\n      return model\n        .populate()\n        .then(() => model);\n    })\n}\nexport function loadConnector(applicationId, connectorKey) {\n  return ConnectorSetting\n    .findOneAsync({\n      key: connectorKey,\n      application: applicationId\n    })\n    .then((connectorSetting) => {\n      if (connectorSetting) {\n        return populateConnector(connectorSetting);\n      }\n    })\n}\nexport function getAvailableConnectors() {\n  return Promise\n    .resolve()\n    .then(() => {\n      return fs.readdirAsync(config.get('Hoist.filePaths.connectors'));\n    })\n    .then((directoryListing) => {\n      _logger.info('directory listing retrieved');\n      return Promise.all(directoryListing.map((file) => {\n        return fs.statAsync(path.join(config.get('Hoist.filePaths.connectors'), file))\n          .then((stat) => {\n            return {\n              dir: file,\n              isDirectory: stat.isDirectory()\n            };\n          });\n      }));\n    })\n    .then((listingMappings) => {\n      return listingMappings.filter((listing) => {\n        return listing.isDirectory;\n      });\n    })\n    .then((connectors) => {\n      var rootDirectory = path.resolve(config.get('Hoist.filePaths.connectors'));\n      return Promise.all(connectors.map((connector) => {\n        return fs\n          .realpathAsync(path.join(rootDirectory, connector.dir, 'current'))\n          .then((connectorDir) => {\n            let settingsPath = path.join(connectorDir, 'connector.json');\n            if (!fs.existsSync(settingsPath)) {\n              return null;\n            } else {\n              return require(settingsPath);\n            }\n          })\n          .then((settings) => {\n            return Object.assign({}, {\n              settings\n            }, {\n              key: connector.dir\n            });\n          });\n      }));\n    })\n    .catch(function (err) {\n      _logger.alert(err);\n      _logger.error(err);\n      throw err;\n      return [];\n    });\n}\nexport function setupDefaultConnector(application, connectorType) {\n\n  //find the root connector settings\n  return ConnectorSetting.findOneAsync({\n      application: config.get('Hoist.admin.applicationId'),\n      key: 'hoist-root-' + connectorType\n    })\n    .then((rootConnectorSetting) => {\n      _logger.info({\n        rootConnectorSetting\n      }, 'root connector loaded');\n      let connectorKey = rootConnectorSetting.defaultKey || connectorType.replace('hoist-connector-', '');\n      _logger.info({\n        connectorKey\n      }, 'connector key');\n      return getUniqueConnectorKey(connectorKey, application._id)\n        .then((key) => {\n          let {\n            name,\n            settings,\n            connectorType\n          } = rootConnectorSetting;\n          let newConnectorSettings = {\n            application: application,\n            name,\n            settings,\n            key,\n            connectorType,\n            environment: 'live'\n          };\n          return new ConnectorSetting(newConnectorSettings)\n            .saveAsync();\n        });\n    });\n}\nexport function getUniqueConnectorKey(candidateKey, applicationId, append) {\n  let key = candidateKey;\n  if (append) {\n    key = key + append;\n  }\n  return ConnectorSetting\n    .countAsync({\n      application: applicationId,\n      key\n    })\n    .then((count) => {\n      if (count > 0) {\n        return getUniqueConnectorKey(candidateKey, applicationId, Math.round(Math.random() * 1000))\n      }\n      return key;\n    });\n}\nexport function getAuthUrl(connector, organisationSlug, applicationSlug, bucketKey = 'default') {\n  return Promise.resolve()\n    .then(() => {\n      let returnUrl = url.format({\n        protocol: config.get('Hoist.cookies.portal.secure') ? 'https' : 'http',\n        host: config.get(\"Hoist.domains.portal\"),\n        pathname: `/${organisationSlug}/${applicationSlug}/connector/${connector.key}`\n      });\n      let uri = {\n        protocol: config.get('Hoist.cookies.portal.secure') ? 'https' : 'http',\n        host: config.get(\"Hoist.domains.bouncer\"),\n        pathname: `/initiate/${organisationSlug}/${applicationSlug}/${connector.key}`,\n        query: {\n          bucketKey,\n          returnUrl\n        }\n      };\n      return r.getAsync(url.format(uri), {\n        followRedirect: false\n      });\n    })\n    .then((response) => {\n      if (response.statusCode !== 302) {\n        throw new Error('unexpected response from Bouncer');\n      }\n      return response.headers.location;\n    });\n}\n"
  },
  {
    "__docId__": 105,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_logger",
    "memberof": "server/logic/connector.js",
    "longname": "server/logic/connector.js~_logger",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/connector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getConnectorsForApplication",
    "memberof": "server/logic/connector.js",
    "longname": "server/logic/connector.js~getConnectorsForApplication",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/connector.js",
    "importStyle": "{getConnectorsForApplication}",
    "description": "returns all connnectors for this application",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Array<ConnectorViewModel>>} - the connectors"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "applicationId",
        "description": "the id of the application to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array<ConnectorViewModel>>"
      ],
      "spread": false,
      "description": "the connectors"
    },
    "generator": false
  },
  {
    "__docId__": 107,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "populateConnector",
    "memberof": "server/logic/connector.js",
    "longname": "server/logic/connector.js~populateConnector",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/connector.js",
    "importStyle": "{populateConnector}",
    "description": "given a connector setting, returns an object loading up the settings and the events that come from the connector",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<ConnectorViewModel>} - the connector view model"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ConnectorSetting"
        ],
        "spread": false,
        "optional": false,
        "name": "connectorSetting",
        "description": "the connector setting to populate"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<ConnectorViewModel>"
      ],
      "spread": false,
      "description": "the connector view model"
    },
    "generator": false
  },
  {
    "__docId__": 108,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "loadConnector",
    "memberof": "server/logic/connector.js",
    "longname": "server/logic/connector.js~loadConnector",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/connector.js",
    "importStyle": "{loadConnector}",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "applicationId",
        "types": [
          "*"
        ]
      },
      {
        "name": "connectorKey",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 109,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getAvailableConnectors",
    "memberof": "server/logic/connector.js",
    "longname": "server/logic/connector.js~getAvailableConnectors",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/connector.js",
    "importStyle": "{getAvailableConnectors}",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 110,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setupDefaultConnector",
    "memberof": "server/logic/connector.js",
    "longname": "server/logic/connector.js~setupDefaultConnector",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/connector.js",
    "importStyle": "{setupDefaultConnector}",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "application",
        "types": [
          "*"
        ]
      },
      {
        "name": "connectorType",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 111,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getUniqueConnectorKey",
    "memberof": "server/logic/connector.js",
    "longname": "server/logic/connector.js~getUniqueConnectorKey",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/connector.js",
    "importStyle": "{getUniqueConnectorKey}",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [
      {
        "name": "candidateKey",
        "types": [
          "*"
        ]
      },
      {
        "name": "applicationId",
        "types": [
          "*"
        ]
      },
      {
        "name": "append",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 112,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getAuthUrl",
    "memberof": "server/logic/connector.js",
    "longname": "server/logic/connector.js~getAuthUrl",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/connector.js",
    "importStyle": "{getAuthUrl}",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [
      {
        "name": "connector",
        "types": [
          "*"
        ]
      },
      {
        "name": "organisationSlug",
        "types": [
          "*"
        ]
      },
      {
        "name": "applicationSlug",
        "types": [
          "*"
        ]
      },
      {
        "name": "bucketKey",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "default",
        "defaultValue": "default"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 113,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/console.js",
    "memberof": null,
    "longname": "server/logic/console.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as RabbitUtils from '../utils/rabbit';\nexport function getMessages(application, token) {\n  let queueName = `application-console-log-${application._id}-${token}`;\n  return Promise\n    .resolve()\n    .then(() => {\n      return RabbitUtils.setupQueue({\n        queue: {\n          name: queueName,\n          properties: {\n            exclusive: false,\n            durable: true,\n            autoDelete: false,\n            expires: 600000\n          }\n        },\n        exchange: {\n          name: 'application-log-messages',\n          type: 'topic',\n          routingKey: `log.${application._id}.#`\n        }\n      })\n    })\n    .then(() => {\n      return RabbitUtils.getMessages(queueName);\n    });\n}\n"
  },
  {
    "__docId__": 114,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getMessages",
    "memberof": "server/logic/console.js",
    "longname": "server/logic/console.js~getMessages",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/console.js",
    "importStyle": "{getMessages}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "application",
        "types": [
          "*"
        ]
      },
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 115,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/editor.js",
    "memberof": null,
    "longname": "server/logic/editor.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {\n  mapEventToModule,\n  createModuleForEvent\n} from './event';\nimport {\n  getApplicationPath\n} from './application';\nimport {\n  Application\n} from '@hoist/model';\nimport Bluebird from 'bluebird';\nimport path from 'path';\nimport fs from 'fs';\nimport logger from '@hoist/logger';\nimport mkdirp from 'mkdirp';\nBluebird.promisifyAll(fs);\n\nconst _logger = logger.child({\n  cls: 'EditorLogic'\n});\n\nexport function getCodeForEvent(applicationId, event) {\n  return Application.findOne({\n      _id: applicationId\n\n    }, 'slug organisation settings')\n    .populate({\n      path: 'organisation',\n      select: 'slug'\n    })\n    .exec()\n    .then((application) => {\n      _logger.info({\n        event: event.key\n      }, \"mapping event to module\");\n      return getEventFilePath(event.key, application)\n        .then((modulePath) => {\n          _logger.info({\n            modulePath: modulePath\n          }, 'loading module');\n          if (modulePath && fs.existsSync(modulePath)) {\n            return fs.readFileAsync(modulePath, {\n              encoding: 'utf8'\n            });\n\n          }\n          _logger.info('module doesnt exist on disk');\n          return null;\n        });\n    });\n}\n\nfunction getEventFilePath(eventName, application) {\n  return mapEventToModule(eventName, application.settings)\n    .then((module) => {\n      return getModulePath(module, application);\n    });\n}\n\nfunction getModulePath(module, application) {\n  return Promise.resolve()\n    .then(() => {\n      if (module && module.src) {\n        _logger.info({\n          module: module\n        }, \"loading module for event\");\n        return getApplicationPath(application)\n          .then((applicationPath) => {\n            return path.resolve(applicationPath, module.src);\n          });\n      } else {\n        return null;\n      }\n    });\n}\n\n\nexport function saveScript({\n  eventName,\n  organisation,\n  application,\n  script\n}) {\n  return getEventFilePath(eventName, application)\n    .then((eventFilePath) => {\n      if (!eventFilePath) {\n        return createModuleForEvent(eventName, application)\n          .then((module) => {\n            return getModulePath(module, application);\n          });\n      }\n      return eventFilePath;\n    })\n    .then((filePath) => {\n      return Bluebird.promisify(mkdirp)(path.dirname(filePath))\n        .then(() => {\n          return fs.writeFileAsync(filePath, script, {\n            encoding: 'utf8'\n          });\n        });\n    });\n}\n"
  },
  {
    "__docId__": 116,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_logger",
    "memberof": "server/logic/editor.js",
    "longname": "server/logic/editor.js~_logger",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/editor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getCodeForEvent",
    "memberof": "server/logic/editor.js",
    "longname": "server/logic/editor.js~getCodeForEvent",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/editor.js",
    "importStyle": "{getCodeForEvent}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "applicationId",
        "types": [
          "*"
        ]
      },
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 118,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getEventFilePath",
    "memberof": "server/logic/editor.js",
    "longname": "server/logic/editor.js~getEventFilePath",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/editor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "eventName",
        "types": [
          "*"
        ]
      },
      {
        "name": "application",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 119,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getModulePath",
    "memberof": "server/logic/editor.js",
    "longname": "server/logic/editor.js~getModulePath",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/editor.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "module",
        "types": [
          "*"
        ]
      },
      {
        "name": "application",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 120,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "saveScript",
    "memberof": "server/logic/editor.js",
    "longname": "server/logic/editor.js~saveScript",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/editor.js",
    "importStyle": "{saveScript}",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"eventName\": *, \"organisation\": *, \"application\": *, \"script\": *}"
        ],
        "defaultRaw": {
          "eventName": null,
          "organisation": null,
          "application": null,
          "script": null
        },
        "defaultValue": "{\"eventName\":null,\"organisation\":null,\"application\":null,\"script\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 121,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/emails.js",
    "memberof": null,
    "longname": "server/logic/emails.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import handlebars from 'handlebars';\nimport fs from 'fs';\nimport path from 'path';\nimport {\n  Client as PostmarkClient\n} from 'postmark';\nimport Bluebird from 'bluebird';\nimport config from 'config';\n\nlet postmark = new PostmarkClient(config.get('Hoist.postmark.key'));\n\nBluebird.promisifyAll(postmark);\nBluebird.promisifyAll(fs);\n\nlet templatesDir = path.resolve(__dirname, '../email_templates');\n\nvar loadTemplates = function () {\n  return Promise.all([\n    fs.readFileAsync(templatesDir + '/html_template.hbs', 'utf8'),\n    fs.readFileAsync(templatesDir + '/text_template.hbs', 'utf8')\n  ])\n    .then(templates => {\n      return templates.map((t) => {\n        return handlebars.compile(t);\n      });\n    })\n    .then(([htmlTemplate, textTemplate]) => {\n      loadTemplates = function () {\n        return Promise.resolve({\n          htmlTemplate,\n          textTemplate\n        });\n      }\n      return loadTemplates();\n    });\n}\n\nexport function sendForgottenPasswordEmail(address, activationCode) {\n  let forgottenPasswordLink = `https://${config.get('Hoist.domains.portal')}/forgot-password/${encodeURIComponent(activationCode)}`;\n  return sendEmail({\n    To: address,\n    Subject: 'Hoist Password Reset',\n    Title: 'Password Reset',\n    Message: [\n      \"Someone used this email address to request a new password for Hoist.\", \"To reset your password head here: <a href='\" + forgottenPasswordLink + \"' style='color:#333333;text-decoration:underline;'>\" + forgottenPasswordLink + \"</a>.\",\n      \"If this wasn't you, simply ignore this email or hit reply to let us know.\"\n    ],\n    Action: {\n      Text: \"Reset Password &rarr;\",\n      Link: 'forgottenPassword'\n    }\n  });\n}\nexport function sendNoUserAcountEmail(address) {\n  return sendEmail({\n    To: address,\n    Subject: 'Someone tried to reset their password on Hoist',\n    Title: \"Someone tried to reset their password on Hoist\",\n    Message: [\"Someone used this email address to request a new password for Hoist, you don't currently have an account.\",\n                  \"<a href='\" + \"https://\" + config.get('Hoist.domains.portal') + \"/signup' style='color:#333333'>Sign up here</a>, if you have any questions feel free to email <a href='mailto:jamie@hoist.io' style='color:#333333'>support@hoist.io</a>.\",\n                  \"If this wasn't you, simply ignore this email or hit reply to let us know.\"],\n    Action: {\n      Text: \"Sign Up &rarr;\",\n      Link: \"https://\" + config.get('Hoist.domains.portal') + \"/signup\"\n    }\n  });\n}\n\n\n\nfunction sendEmail(emailData) {\n  return generateEmailBody(emailData)\n    .then((email) => {\n      return Object.assign({}, email, {\n        From: 'Hoist <hoist@notifications.hoi.io>',\n        ReplyTo: 'Hoist <support@hoist.io>'\n      });\n    })\n    .then((em) => {\n      return em;\n    })\n    .then((em) => {\n      return postmark.sendAsync(em);\n    });\n}\n\nfunction generateEmailBody(emailData) {\n  return loadTemplates()\n    .then((templates) => {\n      emailData = Object.assign({\n        blocks: {},\n        data: {}\n      }, emailData, {\n        config: {\n          src: `https://${config.get('Hoist.domains.portal')}/`\n        }\n      })\n      return Promise.resolve(Object.assign({}, emailData, {\n        HtmlBody: templates.htmlTemplate(emailData),\n        TextBody: templates.textTemplate(emailData)\n      }));\n    });\n}\n"
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "postmark",
    "memberof": "server/logic/emails.js",
    "longname": "server/logic/emails.js~postmark",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/emails.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "postmark~PostmarkClient"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "templatesDir",
    "memberof": "server/logic/emails.js",
    "longname": "server/logic/emails.js~templatesDir",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/emails.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "loadTemplates",
    "memberof": "server/logic/emails.js",
    "longname": "server/logic/emails.js~loadTemplates",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/emails.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 125,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sendForgottenPasswordEmail",
    "memberof": "server/logic/emails.js",
    "longname": "server/logic/emails.js~sendForgottenPasswordEmail",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/emails.js",
    "importStyle": "{sendForgottenPasswordEmail}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      },
      {
        "name": "activationCode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 126,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sendNoUserAcountEmail",
    "memberof": "server/logic/emails.js",
    "longname": "server/logic/emails.js~sendNoUserAcountEmail",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/emails.js",
    "importStyle": "{sendNoUserAcountEmail}",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "address",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 127,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sendEmail",
    "memberof": "server/logic/emails.js",
    "longname": "server/logic/emails.js~sendEmail",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/emails.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [
      {
        "name": "emailData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 128,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "generateEmailBody",
    "memberof": "server/logic/emails.js",
    "longname": "server/logic/emails.js~generateEmailBody",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/emails.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "emailData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 129,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/event.js",
    "memberof": null,
    "longname": "server/logic/event.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import logger from '@hoist/logger';\n\nconst _logger = logger.child({\n  cls: 'EventLogic'\n});\nexport function mapEventToModule(event, settings) {\n\n  if (!settings || !settings.live) {\n    return Promise.resolve(null);\n  }\n  settings = settings.live;\n  _logger.info({\n    event,\n    settings\n  }, 'mapping event to module');\n  return Promise\n    .resolve()\n    .then(() => {\n      return settings.on[event];\n    })\n    .then((eventMapping) => {\n      if (eventMapping) {\n        _logger.info('found matching event mapping');\n        return (eventMapping.modules || [])\n          .map((moduleName) => {\n            return settings\n              .modules\n              .find((module) => {\n                return module.name === moduleName\n              });\n          })\n      }\n    })\n    .then((modules) => {\n      if (modules) {\n        _logger.info({\n          moduleLength: modules.length\n        }, 'returning modules');\n        if (modules && modules.length === 1) {\n          return modules[0];\n        } else {\n          return modules;\n        }\n      } else {\n        _logger.info('no modules found');\n        return null;\n      }\n    });\n}\nexport function getEvents(settings) {\n  if (!settings || !settings.live) {\n    return Promise.resolve([]);\n  }\n  settings = settings.live;\n  return Promise\n    .resolve()\n    .then(() => {\n      if (!settings.on) {\n        return [];\n      }\n      return Object\n        .keys(settings.on)\n        .map((evName) => ({\n          name: evName,\n          description: '',\n          key: evName\n        }));\n    });\n}\nexport function createEvent(application, eventName) {\n  return Promise\n    .resolve()\n    .then(() => {\n      application.settings = application.settings;\n      application.settings.live = application.settings.live || {};\n      application.settings.live.on = application.settings.live.on || {};\n      application.settings.live.on[eventName] = application.settings.live.on[eventName] || {\n        modules: []\n      };\n      return application.saveAsync();\n    })\n    .then(() => {\n      return eventName;\n    });\n\n}\n\nexport function createModuleForEvent(eventName, application) {\n  return Promise\n    .resolve()\n    .then(() => {\n      let module = {\n        name: `${eventName}-module`,\n        src: `./hoist-modules/${eventName}.js`\n      };\n      application.settings = application.settings;\n      application.settings.live = application.settings.live || {};\n      application.settings.live.modules = application.settings.live.modules || [];\n      application.settings.live.on = application.settings.live.on || {};\n      application.settings.live.on[eventName] = application.settings.live.on[eventName] || {\n        modules: []\n      };\n      application.settings.live.modules.push(module);\n      application.settings.live.on[eventName].modules.push(module.name);\n      return application.saveAsync()\n        .then(() => module);\n    });\n}\n"
  },
  {
    "__docId__": 130,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_logger",
    "memberof": "server/logic/event.js",
    "longname": "server/logic/event.js~_logger",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/event.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mapEventToModule",
    "memberof": "server/logic/event.js",
    "longname": "server/logic/event.js~mapEventToModule",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/event.js",
    "importStyle": "{mapEventToModule}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "settings",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 132,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getEvents",
    "memberof": "server/logic/event.js",
    "longname": "server/logic/event.js~getEvents",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/event.js",
    "importStyle": "{getEvents}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "settings",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 133,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createEvent",
    "memberof": "server/logic/event.js",
    "longname": "server/logic/event.js~createEvent",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/event.js",
    "importStyle": "{createEvent}",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "application",
        "types": [
          "*"
        ]
      },
      {
        "name": "eventName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 134,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createModuleForEvent",
    "memberof": "server/logic/event.js",
    "longname": "server/logic/event.js~createModuleForEvent",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/event.js",
    "importStyle": "{createModuleForEvent}",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "eventName",
        "types": [
          "*"
        ]
      },
      {
        "name": "application",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 135,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/index.js",
    "memberof": null,
    "longname": "server/logic/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as SessionLogic from './session';\nimport * as ConnectorLogic from './connector';\nimport * as EditorLogic from './editor';\nimport * as ConsoleLogic from './console';\nimport * as EventLogic from './event';\nimport * as SettingsLogic from './settings';\nimport * as UserLogic from './user';\nimport * as ApplicationLogic from './application';\nimport * as OrganisationLogic from './organisation';\nexport {\n  SessionLogic as SessionLogic,\n  ConnectorLogic as ConnectorLogic,\n  EditorLogic as EditorLogic,\n  ConsoleLogic as ConsoleLogic,\n  EventLogic as EventLogic,\n  SettingsLogic as SettingsLogic,\n  UserLogic as UserLogic,\n  ApplicationLogic as ApplicationLogic,\n  OrganisationLogic as OrganisationLogic\n};\n"
  },
  {
    "__docId__": 136,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/organisation.js",
    "memberof": null,
    "longname": "server/logic/organisation.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {Organisation} from '@hoist/model';\nimport slugify from 'slug';\nimport errors from '@hoist/errors';\nexport function create({\n  personal = false,\n  name,\n  slug = null\n}) {\n  return Promise\n    .resolve(slugify(slug || name))\n    .then((slug) => {\n      return Organisation\n        .countAsync({slug: slug})\n        .then((slugColisions) => {\n          if (slugColisions > 0) {\n            throw new errors.HoistError('an organisaiton with that slug already exists');\n          }\n        })\n        .then(() => {\n          return new Organisation({personal, name, slug}).saveAsync();\n        });\n    });\n\n}\n"
  },
  {
    "__docId__": 137,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "create",
    "memberof": "server/logic/organisation.js",
    "longname": "server/logic/organisation.js~create",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/organisation.js",
    "importStyle": "{create}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"personal\": *, \"name\": *, \"slug\": *}"
        ],
        "defaultRaw": {
          "personal": null,
          "name": null,
          "slug": null
        },
        "defaultValue": "{\"personal\":null,\"name\":null,\"slug\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 138,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/session.js",
    "memberof": null,
    "longname": "server/logic/session.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {\n  IpLog,\n  LoginLog,\n  Application,\n  HoistUser,\n  Organisation,\n  Session\n} from '@hoist/model';\nimport errors from '@hoist/errors';\n\nimport logger from '@hoist/logger';\n\nlet _logger = logger.child({cls: 'SessionLogic'});\n\n/**\n * get a user based on login details, verifies password and ip address\n * @param {object} credentials - the user credentials\n * @param {string} credentials.email - the user email\n * @param {string} credentials.password - this user password\n * @param {string} credentials.ipAddress - the users ipAddress\n * @returns {Promise<HoistUser>} - the hoist user on successful login\n * @throws {errors.user.request.InvalidError} when the email or password is incorrect\n * @throws {errors.user.credentials.IncorrectError} when the user email or password are incorrect\n * @throws {errors.user.request.IPLockedError} when ip address is locked\n * @throws {errors.user.request.AccountLockedError} when ip address is locked\n */\nexport function ensureLogin({\n  email = \"\",\n  password,\n  ipAddress\n}) {\n  return Promise\n    .resolve()\n    .then(() => {\n      _logger.info('checking ip address');\n      return IpLog.assertIP({ipAddress});\n    })\n    .then(() => {\n      /* ensure request parameters are ok */\n      _logger.info('checking email and username are set');\n      if (!email || email.length < 1) {\n        throw new errors\n          .user\n          .request\n          .InvalidError(\"invalid email supplied\");\n      }\n      if (!password || password.length < 1) {\n        throw new errors\n          .user\n          .request\n          .InvalidError(\"invalid password supplied\");\n      }\n    })\n    .then(() => {\n      /* load up the user */\n      _logger.info('finding user');\n      return HoistUser.findOneAsync({\n        'emailAddresses.address': email.toLowerCase()\n      });\n    })\n    .then((user) => {\n      if (!user) {\n        _logger.info('email address supplied was incorrect');\n        throw new errors\n          .user\n          .credentials\n          .IncorrectError();\n      }\n      _logger.info('checking user lock');\n      /* ensure the user isn't locked*/\n      return LoginLog\n        .assertUser(user)\n        .then(() => user);\n    })\n    .then((user) => {\n      /* check the user password */\n      _logger.info('checking password');\n      if (!user.verifyPassword(password)) {\n        _logger.info('password supplied was incorrect');\n        throw new errors\n          .user\n          .credentials\n          .IncorrectError();\n      }\n      return user;\n    });\n}\n\n/**\n * creates a session for the user based on their last logged in session\n * @param {HoistUser} user - the user to create a session for\n * @returns {Promise<Session>} - the created session\n */\nexport function createSessionForUser(user) {\n  /* load up the last session from this user */\n  return Session\n    .find({user: user._id})\n    .sort({updatedAt: -1})\n    .limit(1)\n    .select({_id: -1, organisation: 1, application: 1})\n    .exec()\n    .then(([lastSession]) => {\n      let sessionData = Object.assign({}, {\n        user: user\n      }, lastSession);\n      if (!sessionData.organisation && user.organisations && user.organisations.length > 0) {\n        sessionData.organisation = user.organisations[user.organisations.length - 1];\n      }\n      if (!sessionData.application && sessionData.organisation) {\n        //load first application for organisation by created date desc\n        return Application\n          .find({organisation: sessionData.organisation})\n          .sort({updatedAt: -1})\n          .limit(1)\n          .select({_id: 1})\n          .exec()\n          .then(([application]) => {\n            if (application) {\n              sessionData.application = application._id;\n            }\n            return sessionData;\n          });\n      }\n      return sessionData;\n    })\n    .then((sessionData) => new Session(sessionData).saveAsync())\n    .then((result) => {\n      if (result && result.length) {\n        return result[0];\n      } else {\n        return result;\n      }\n    });\n}\n\n/**\n * saves login attempts to the database against username and ip addresses\n * @param {object} credentials - the user credentials\n * @param {string} credentials.email - the user email\n * @param {string} credentials.ipAddress - the users ipAddress\n * @param {bool} success - if the login was successful or not\n * @returns {Promise} - a promise to have saved the login logs\n */\nexport function logLogin({\n  email = \"\",\n  ipAddress\n}, success) {\n  return Promise.all([\n    new IpLog({ip: ipAddress, success}).saveAsync(),\n    new LoginLog({\n      username: email.toLowerCase(),\n      success\n    }).saveAsync()\n  ])\n}\n\n/**\n * load up details of the users session from a session object\n * @param {Session} session - the users current session\n * @returns {SessionDetails} - the details of the currently logged in session\n */\nexport function getSessionDetails(session) {\n  let user;\n  let organisation;\n  let application;\n  let organisations;\n  let applications;\n  return Promise\n    .resolve()\n    .then(() => {\n      return session\n        .populate({path: 'organisation', select: '_id slug name isPersonal'})\n        .populate({path: 'application', select: '_id slug name apiKey settings'})\n        .populate({path: 'user', select: 'name organisations emailAddresses role'})\n        .execPopulate();\n    })\n    .then(() => {\n      session = session.toJSON();\n      user = Object.assign({}, session.user);\n      application = Object.assign({}, session.application);\n      organisation = Object.assign({}, session.organisation);\n    })\n    .then(() => {\n      if (user && user.organisations) {\n        return Organisation.findAsync({\n          _id: {\n            $in: user.organisations\n          }\n        }, 'slug name isPersonal').then((result) => {\n          organisations = result.map((org) => Object.assign({}, org.toJSON()));\n          if (!organisation || !organisation._id) {\n            if (organisations.length > 0) {\n              organisation = organisations[organisations.length - 1];\n            }\n          }\n        });\n      }\n    })\n    .then(() => {\n      if (organisation && organisation._id) {\n        return Application.findAsync({\n          organisation: organisation._id\n        }, 'slug name apiKey settings').then((results) => {\n          applications = results.map((app) => Object.assign({}, app.toJSON()));\n          if (applications.length > 0) {\n            if (!application || !application._id) {\n              application = applications[applications.length - 1];\n            }\n          }\n        });\n      }\n    })\n    .then(() => {\n      return {user, organisation, application, organisations, applications}\n    });\n}\n\n/**\n * updates the session organisation, (sets the session application appropriately too) then returns the new session\n * @param {Session} session - the users current session\n * @param {string} organisationId - the new organisation id\n * @returns {SessionDetails} - the details of the currently logged in session\n * @throws {errors.model.organisation.NotFoundError} - either the organisation doesn't exist or the user doesn't have access\n */\nexport function updateOrganisation(session, organisationId) {\n  return Promise\n    .resolve()\n    .then(() => {\n      if (!session.user.organisations.find((id) => id === organisationId)) {\n        throw new errors\n          .model\n          .organisation\n          .NotFoundError();\n      } else {\n        session.organisation = organisationId;\n        session.application = null;\n        return getSessionDetails(session).then((sessionDetails) => {\n          session.application = sessionDetails.application._id;\n          return session\n            .saveAsync()\n            .then(() => sessionDetails);\n        });\n      }\n    });\n}\n\n/**\n * updates the session application then returns the new session\n * @param {Session} session - the users current session\n * @param {string} applicationId - the new application id\n * @returns {SessionDetails} - the details of the currently logged in session\n * @throws {errors.model.organisation.NotFoundError} - either the organisation doesn't exist or the user doesn't have access\n */\nexport function updateApplication(session, applicationId) {\n  return Promise\n    .resolve()\n    .then(() => {\n      return Application.countAsync({organisation: session.organisation._id, _id: applicationId});\n    })\n    .then((applicationCount) => {\n      if (applicationCount < 1) {\n        throw new errors\n          .model\n          .organisation\n          .NotFoundError();\n      }\n    })\n    .then(() => {\n      session.application = applicationId;\n      return session\n        .saveAsync()\n        .then(() => getSessionDetails(session));\n    });\n}\n"
  },
  {
    "__docId__": 139,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_logger",
    "memberof": "server/logic/session.js",
    "longname": "server/logic/session.js~_logger",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/session.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ensureLogin",
    "memberof": "server/logic/session.js",
    "longname": "server/logic/session.js~ensureLogin",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/session.js",
    "importStyle": "{ensureLogin}",
    "description": "get a user based on login details, verifies password and ip address",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<HoistUser>} - the hoist user on successful login"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "the user credentials"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials.email",
        "description": "the user email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials.password",
        "description": "this user password"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials.ipAddress",
        "description": "the users ipAddress"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<HoistUser>"
      ],
      "spread": false,
      "description": "the hoist user on successful login"
    },
    "throws": [
      {
        "types": [
          "errors.user.request.InvalidError"
        ],
        "description": "when the email or password is incorrect"
      },
      {
        "types": [
          "errors.user.credentials.IncorrectError"
        ],
        "description": "when the user email or password are incorrect"
      },
      {
        "types": [
          "errors.user.request.IPLockedError"
        ],
        "description": "when ip address is locked"
      },
      {
        "types": [
          "errors.user.request.AccountLockedError"
        ],
        "description": "when ip address is locked"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 141,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createSessionForUser",
    "memberof": "server/logic/session.js",
    "longname": "server/logic/session.js~createSessionForUser",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/session.js",
    "importStyle": "{createSessionForUser}",
    "description": "creates a session for the user based on their last logged in session",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<Session>} - the created session"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HoistUser"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": "the user to create a session for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Session>"
      ],
      "spread": false,
      "description": "the created session"
    },
    "generator": false
  },
  {
    "__docId__": 142,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "logLogin",
    "memberof": "server/logic/session.js",
    "longname": "server/logic/session.js~logLogin",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/session.js",
    "importStyle": "{logLogin}",
    "description": "saves login attempts to the database against username and ip addresses",
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - a promise to have saved the login logs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "the user credentials"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials.email",
        "description": "the user email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials.ipAddress",
        "description": "the users ipAddress"
      },
      {
        "nullable": null,
        "types": [
          "bool"
        ],
        "spread": false,
        "optional": false,
        "name": "success",
        "description": "if the login was successful or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "a promise to have saved the login logs"
    },
    "generator": false
  },
  {
    "__docId__": 143,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getSessionDetails",
    "memberof": "server/logic/session.js",
    "longname": "server/logic/session.js~getSessionDetails",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/session.js",
    "importStyle": "{getSessionDetails}",
    "description": "load up details of the users session from a session object",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SessionDetails} - the details of the currently logged in session"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Session"
        ],
        "spread": false,
        "optional": false,
        "name": "session",
        "description": "the users current session"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SessionDetails"
      ],
      "spread": false,
      "description": "the details of the currently logged in session"
    },
    "generator": false
  },
  {
    "__docId__": 144,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "updateOrganisation",
    "memberof": "server/logic/session.js",
    "longname": "server/logic/session.js~updateOrganisation",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/session.js",
    "importStyle": "{updateOrganisation}",
    "description": "updates the session organisation, (sets the session application appropriately too) then returns the new session",
    "lineNumber": 225,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SessionDetails} - the details of the currently logged in session"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Session"
        ],
        "spread": false,
        "optional": false,
        "name": "session",
        "description": "the users current session"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "organisationId",
        "description": "the new organisation id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SessionDetails"
      ],
      "spread": false,
      "description": "the details of the currently logged in session"
    },
    "throws": [
      {
        "types": [
          "errors.model.organisation.NotFoundError"
        ],
        "description": "either the organisation doesn't exist or the user doesn't have access"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 145,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "updateApplication",
    "memberof": "server/logic/session.js",
    "longname": "server/logic/session.js~updateApplication",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/session.js",
    "importStyle": "{updateApplication}",
    "description": "updates the session application then returns the new session",
    "lineNumber": 254,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SessionDetails} - the details of the currently logged in session"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Session"
        ],
        "spread": false,
        "optional": false,
        "name": "session",
        "description": "the users current session"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "applicationId",
        "description": "the new application id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SessionDetails"
      ],
      "spread": false,
      "description": "the details of the currently logged in session"
    },
    "throws": [
      {
        "types": [
          "errors.model.organisation.NotFoundError"
        ],
        "description": "either the organisation doesn't exist or the user doesn't have access"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 146,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/settings.js",
    "memberof": null,
    "longname": "server/logic/settings.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import config from 'config';\nimport Promise from 'bluebird';\nimport fs from 'fs';\nimport path from 'path';\nimport {getAvailableConnectors} from './connector';\n\nPromise.promisifyAll(fs);\n\nexport function getAllSettings() {\n  return Promise\n    .resolve()\n    .then(() => {\n      return Promise.all([getAvailableConnectors()]);\n    })\n    .then(([availableConnectors]) => {\n      return {availableConnectors}\n    });\n}\n"
  },
  {
    "__docId__": 147,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getAllSettings",
    "memberof": "server/logic/settings.js",
    "longname": "server/logic/settings.js~getAllSettings",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/settings.js",
    "importStyle": "{getAllSettings}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 148,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/logic/user.js",
    "memberof": null,
    "longname": "server/logic/user.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {\n  HoistUser,\n  Organisation,\n  HoistForgottenPassword\n} from '@hoist/model';\nimport * as ApplicationLogic from './application';\nimport * as OrganisationLogic from './organisation';\nimport * as EmailLogic from './emails';\nimport slugify from 'slug';\nimport errors from '@hoist/errors';\n\nimport logger from '@hoist/logger';\nimport validator from 'validator';\nimport config from 'config';\nimport moment from 'moment';\n\nlet _logger = logger.child({\n  cls: 'SessionLogic'\n});\n\n/**\n * create a new user. Also creates an organisation and an application for the user\n * @param {object} credentials - the user credentials\n * @param {string} credentials.username - the users username\n * @param {string} credentials.email - the user email\n * @param {string} credentials.password - this user password\n * @param {string} credentials.passwordCheck - this user password repeated\n * @returns {Promise<HoistUser>} - the hoist user that was created\n * @throws {errors.user.request.InvalidError} when the email is not valid\n * @throws {errors.user.credentials.IncorrectError} if the username already matches an existing username\n */\nexport function create({\n  username,\n  email,\n  password,\n  passwordCheck\n}) {\n  return Promise\n    .resolve()\n    .then(() => {\n      /* ensure request parameters are ok */\n      _logger.info('checking required fields');\n      if (!username || username.length < 1) {\n        throw new errors\n          .user\n          .request\n          .InvalidError(\"invalid name supplied\");\n      }\n      if (!email || email.length < 1 || !validator.isEmail(email)) {\n        throw new errors\n          .user\n          .request\n          .InvalidError(\"invalid email supplied\");\n      }\n      if (password !== passwordCheck) {\n        throw new errors\n          .user\n          .request\n          .InvalidError(\"supplied passwords don't match\");\n      }\n      if (!password || password.length < 6) {\n        throw new errors\n          .user\n          .request\n          .InvalidError(\"invalid password supplied, passwords must be longer than 6 characters\");\n      }\n    })\n    .then(() => {\n      /* load up the user */\n      _logger.info('finding user');\n      return HoistUser.countAsync({\n        \"$or\": [\n          {\n            'emailAddresses.address': email.toLowerCase()\n          }, {\n            name: username.toLowerCase()\n          }\n        ]\n      });\n    })\n    .then((userCount) => {\n      if (userCount > 0) {\n        _logger.info('an account for that email address or username already exists');\n        throw new errors\n          .user\n          .credentials\n          .IncorrectError('an account for that email address already exists');\n      }\n      return Organisation.countAsync({\n        slug: slugify(username)\n      });\n    })\n    .then(organisationCount => {\n      if (organisationCount > 0) {\n        _logger.info('an organisation for that username already exists');\n        throw new errors\n          .user\n          .credentials\n          .IncorrectError('an organisation for that username already exists');\n      }\n\n      let user = new HoistUser({\n        name: username.toLowerCase(),\n        emailAddresses: [\n          {\n            address: email.toLowerCase()\n          }\n        ]\n      });\n      return user.setPassword(password);\n    })\n    .then((user) => {\n      return OrganisationLogic\n        .create({\n          personal: true,\n          name: username\n        })\n        .then((organisation) => ApplicationLogic.create({\n            organisation: organisation,\n            name: username\n          })\n          .then((application) => {\n            user\n              .organisations\n              .push(organisation);\n            return user\n              .saveAsync()\n              .catch((err) => {\n                return Promise\n                  .all([application.remove()])\n                  .then(() => {\n                    throw err;\n                  })\n              });\n          })\n          .catch((err) => {\n            return Promise\n              .all([organisation.remove()])\n              .then(() => {\n                throw err;\n              })\n          }));\n    });\n}\n\n/**\n * creates a forgotten password for a user, or notifies them if they don't have an account.\n * @param {object} credentials - the user credentials\n * @param {string} credentials.email - the user email\n * @returns {Promise} - a promise to have created and emailed the forgotten password request\n * @throws {errors.user.request.InvalidError} when the email is not valid\n */\nexport function createForgottenPassword({\n  email\n}) {\n  return Promise\n    .resolve()\n    .then(() => {\n      return HoistUser.findOneAsync({\n        'emailAddresses.address': email.toLowerCase()\n      });\n    })\n    .then((user) => {\n      if (!user) {\n        return EmailLogic.sendNoUserAcountEmail(email);\n      }\n      return new HoistForgottenPassword({\n          user: user\n        })\n        .saveAsync()\n        .then((forgottenPasswordRequest) => EmailLogic.sendForgottenPasswordEmail(email, forgottenPasswordRequest.activationCode))\n    });\n\n}\n\nexport function activateForgottenPassword({\n  password,\n  passwordCheck,\n  activationCode\n}) {\n  return Promise.resolve()\n    .then(() => {\n      return HoistForgottenPassword.findOne({\n          activationCode,\n          activated: false,\n          $or: [{\n            activatedDate: null\n          }, {\n            activatedDate: {\n              $exists: false\n            }\n          }],\n          createdAt: {\n            $gt: moment()\n              .add('hour', -2)\n              .utc()\n              .toDate()\n          }\n        })\n        .populate('user')\n        .exec();\n    })\n    .then(forgottenPassword => {\n      if (!forgottenPassword) {\n        throw new errors.HoistError(\"ForgottenPassword token not found\");\n      }\n      if (password !== passwordCheck) {\n        throw new errors\n          .user\n          .request\n          .InvalidError(\"supplied passwords don't match\");\n      }\n      if (!password || password.length < 6) {\n        throw new errors\n          .user\n          .request\n          .InvalidError(\"invalid password supplied, passwords must be longer than 6 characters\");\n      }\n\n      return forgottenPassword.user.setPassword(password)\n        .then((u) => {\n          return u.saveAsync();\n        });\n    });\n}\n"
  },
  {
    "__docId__": 149,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_logger",
    "memberof": "server/logic/user.js",
    "longname": "server/logic/user.js~_logger",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/logic/user.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "create",
    "memberof": "server/logic/user.js",
    "longname": "server/logic/user.js~create",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/user.js",
    "importStyle": "{create}",
    "description": "create a new user. Also creates an organisation and an application for the user",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise<HoistUser>} - the hoist user that was created"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "the user credentials"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials.username",
        "description": "the users username"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials.email",
        "description": "the user email"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials.password",
        "description": "this user password"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials.passwordCheck",
        "description": "this user password repeated"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<HoistUser>"
      ],
      "spread": false,
      "description": "the hoist user that was created"
    },
    "throws": [
      {
        "types": [
          "errors.user.request.InvalidError"
        ],
        "description": "when the email is not valid"
      },
      {
        "types": [
          "errors.user.credentials.IncorrectError"
        ],
        "description": "if the username already matches an existing username"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 151,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createForgottenPassword",
    "memberof": "server/logic/user.js",
    "longname": "server/logic/user.js~createForgottenPassword",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/user.js",
    "importStyle": "{createForgottenPassword}",
    "description": "creates a forgotten password for a user, or notifies them if they don't have an account.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} - a promise to have created and emailed the forgotten password request"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "the user credentials"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials.email",
        "description": "the user email"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "a promise to have created and emailed the forgotten password request"
    },
    "throws": [
      {
        "types": [
          "errors.user.request.InvalidError"
        ],
        "description": "when the email is not valid"
      }
    ],
    "generator": false
  },
  {
    "__docId__": 152,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "activateForgottenPassword",
    "memberof": "server/logic/user.js",
    "longname": "server/logic/user.js~activateForgottenPassword",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/logic/user.js",
    "importStyle": "{activateForgottenPassword}",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"password\": *, \"passwordCheck\": *, \"activationCode\": *}"
        ],
        "defaultRaw": {
          "password": null,
          "passwordCheck": null,
          "activationCode": null
        },
        "defaultValue": "{\"password\":null,\"passwordCheck\":null,\"activationCode\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 153,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/models/connector_view_model.js",
    "memberof": null,
    "longname": "server/models/connector_view_model.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import fs from 'fs';\nimport Promise from 'bluebird';\nimport path from 'path';\nimport config from 'config';\nimport _ from 'lodash';\nimport bluebird from 'bluebird';\n\nbluebird.promisifyAll(fs);\n/**\n * this is a cut down class for views to look at connector settings\n */\nexport class ConnectorViewModel {\n  /**\n   * create a new connector view model from ConnectorSetting\n   * @param {ConnectorSetting} connectorSetting\n   */\n  constructor (connectorSetting) {\n    this._connectorSetting = connectorSetting\n  }\n  _connectorPath () {\n    return path.resolve(path.join(config.get('Hoist.filePaths.connectors'), this.type, 'current'));\n  }\n\n  /**\n   * @returns {string} - the key for this connector\n   */\n  get key () {\n    return this._connectorSetting.key;\n  }\n\n  /**\n   * @returns {String} the name of this connector\n   */\n  get name () {\n    return this._connectorSetting.name;\n  }\n\n  /**\n   * @returns {string} the type of this connector\n   */\n  get type () {\n    return this._connectorSetting.connectorType;\n  }\n\n  /**\n   * @returns {Object} the settings for this connector\n   */\n  get settings () {\n    return this._connectorSetting.settings;\n  }\n\n  /**\n   * @returns {Array<Object>} a list of available events for this connector\n   */\n  get events () {\n    return this._events;\n  }\n\n  codeForEvent (event) {\n    //returns the sample code for an event for this connector\n    return Promise\n      .resolve()\n      .then(() => {\n        let codePath = path.join(this._connectorPath(), 'samples', `${event.name}.js`);\n        if (!fs.existsSync(codePath)) {\n          return null;\n        } else {\n          return fs.readFileAsync(codePath, {encoding: 'utf8'});\n        }\n      })\n  }\n\n  /**\n   * populates the parts of the model that can't be done syncronously\n   * @returns {Promise} when the model has been populated\n   */\n  populate () {\n    return Promise\n      .resolve()\n      .then(() => {\n        //load up the connector.json\n        return require(path.join(this._connectorPath(), 'connector.json'))\n      })\n      .then((connectorJson) => {\n        this._connectorJson = connectorJson;\n        if (connectorJson.events) {\n          return connectorJson\n            .events\n            .map(({description, name}) => ({description: description, name: name, connector: `${this.key}`, key: `${this.key}:${name}`}));\n        } else {\n          return _.flatten(_.map(connectorJson.endpoints, (endpoint, name) => {\n            let eventsNames;\n            if (endpoint.events) {\n              return endpoint\n                .events\n                .map((eventName) => ({description: '', name: `${eventName}:${name}`, connector: `${this.key}`, key: `${this.key}:${eventName}:${name}`}));\n            } else {\n              return [\n                {\n                  description: '',\n                  name: `new:${name}`,\n                  connector: `${this.key}`,\n                  key: `${this.key}:new:${name}`\n                }, {\n                  description: '',\n                  name: `modified:${name}`,\n                  connector: `${this.key}`,\n                  key: `${this.key}:modified:${name}`\n                }, {\n                  description: '',\n                  name: `deleted:${name}`,\n                  connector: `${this.key}`,\n                  key: `${this.key}:deleted:${name}`\n                }\n              ]\n            }\n          }));\n        }\n      })\n      .then((events) => {\n        this._events = events;\n      });\n  }\n  toJSON () {\n    return Object.assign({}, {\n      key: this.key,\n      name: this.name,\n      events: this.events,\n      settings: this.settings,\n      type: this.type\n    });\n  }\n}\n"
  },
  {
    "__docId__": 154,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "ConnectorViewModel",
    "memberof": "server/models/connector_view_model.js",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/models/connector_view_model.js",
    "importStyle": "{ConnectorViewModel}",
    "description": "this is a cut down class for views to look at connector settings",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 155,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#constructor",
    "access": null,
    "description": "create a new connector view model from ConnectorSetting",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "ConnectorSetting"
        ],
        "spread": false,
        "optional": false,
        "name": "connectorSetting",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 156,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_connectorSetting",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#_connectorSetting",
    "access": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "_connectorPath",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#_connectorPath",
    "access": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 158,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "key",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#key",
    "access": null,
    "description": null,
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} - the key for this connector"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the key for this connector"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 159,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "name",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#name",
    "access": null,
    "description": null,
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} the name of this connector"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "the name of this connector"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 160,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "type",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#type",
    "access": null,
    "description": null,
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} the type of this connector"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "the type of this connector"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 161,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "settings",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#settings",
    "access": null,
    "description": null,
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} the settings for this connector"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the settings for this connector"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 162,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "events",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#events",
    "access": null,
    "description": null,
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} a list of available events for this connector"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "a list of available events for this connector"
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 163,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "codeForEvent",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#codeForEvent",
    "access": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 164,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "populate",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#populate",
    "access": null,
    "description": "populates the parts of the model that can't be done syncronously",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} when the model has been populated"
      }
    ],
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "when the model has been populated"
    },
    "generator": false
  },
  {
    "__docId__": 165,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_connectorJson",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#_connectorJson",
    "access": null,
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "static": false,
    "variation": null,
    "name": "_events",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#_events",
    "access": null,
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toJSON",
    "memberof": "server/models/connector_view_model.js~ConnectorViewModel",
    "longname": "server/models/connector_view_model.js~ConnectorViewModel#toJSON",
    "access": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 168,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/utils/index.js",
    "memberof": null,
    "longname": "server/utils/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as StringUtils from './string_utils';\nexport {StringUtils as StringUtils}\n"
  },
  {
    "__docId__": 169,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/utils/rabbit.js",
    "memberof": null,
    "longname": "server/utils/rabbit.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import amqp from 'amqplib';\nimport config from 'config';\nimport logger from '@hoist/logger';\nimport moment from 'moment';\nconst _logger = logger.child({cls: 'RabbitUtils'});\n\nlet _connection = amqp\n  .connect(config.get('Hoist.rabbit.url'))\n  .then((connection) => {\n    connection.on('close', () => {\n      open = null;\n    });\n    connection.on('error', (err) => {\n      _logger.error(err);\n      _logger.alert(err);\n    });\n    return connection;\n  });\n\nfunction connect() {\n  if (!_connection) {\n    _connection = amqp\n      .connect(config.get('Hoist.rabbit.url'))\n      .then((connection) => {\n        connection.on('close', () => {\n          _connection = null;\n        });\n        connection.on('error', (err) => {\n          _logger.error(err);\n          _logger.alert(err);\n        });\n        return connection;\n      });\n  }\n  return _connection;\n}\n\nexport function setupQueue({queue, exchange}) {\n  return connect().then((connection) => {\n    _logger.info('creating channel');\n    return connection.createChannel()\n  }).then((channel) => {\n    let _err;\n    _logger.info('asserting queue');\n    return channel\n      .assertQueue(queue.name, queue.properties)\n      .then((queueDetails) => {\n        if (exchange) {\n          _logger.info('asserting exchange');\n          return channel\n            .assertExchange(exchange.name, exchange.type)\n            .then(() => {\n              _logger.info('binding queue to exchange');\n              return channel.bindQueue(queueDetails.queue, exchange.name, exchange.routingKey);\n            })\n        }\n      })\n      .catch((err) => {\n        _logger.info('saving error for later');\n        _err = err;\n      })\n      .then(() => {\n        _logger.info('closing channel');\n        return channel.close();\n      })\n      .then(() => {\n        if (_err) {\n          _logger.info('rethrowing error');\n          throw _err;\n        }\n      });\n  });\n}\n\nfunction _getMany(channel, queue, max = 10, current = []) {\n  _logger.info({\n    current\n  }, 'getting messages');\n  if (current.length > max) {\n    return current;\n  } else {\n    return channel\n      .get(queue, {noAck: true})\n      .then((message) => {\n        if (!message) {\n          return current;\n        } else {\n          let content = JSON.parse(message.content.toString());\n          _logger.info({\n            content\n          }, 'got a rabbit message');\n          return _getMany(channel, queue, max, current.concat(formatLogEntry(content)));\n        }\n      })\n  }\n}\n\nfunction formatLogEntry(eventLog) {\n  return {\n    id: eventLog._id,\n    type: eventLog.type || 'log',\n    message: eventLog.message,\n    time: moment(eventLog.createdAt).format('HH:mm:ss'),\n    stack: eventLog.errorStack\n  }\n}\nexport function getMessages(queue, max) {\n  return connect().then((connection) => {\n    _logger.info('creating channel');\n    return connection.createChannel()\n  }).then((channel) => {\n    let _err;\n    channel.prefetch(max);\n    return _getMany(channel, queue, max, []).catch((err) => {\n      _logger.info('saving error for later');\n      _err = err;\n    }).then((messages) => {\n      _logger.info('closing channel');\n      return channel\n        .close()\n        .then(() => messages);\n    }).then((messages) => {\n      if (_err) {\n        _logger.info('rethrowing error');\n        throw _err;\n      }\n      return messages;\n    });\n  }).then((messages) => {\n    _logger.info({\n      messages: messages\n    }, 'returning messages');\n    return messages || [];\n  });\n}\nexport function closeConnection() {\n  if (_connection) {\n    return connect().then((connection) => {\n      return connection.close();\n    });\n  }\n}\n"
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_logger",
    "memberof": "server/utils/rabbit.js",
    "longname": "server/utils/rabbit.js~_logger",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/utils/rabbit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "_connection",
    "memberof": "server/utils/rabbit.js",
    "longname": "server/utils/rabbit.js~_connection",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/utils/rabbit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "connect",
    "memberof": "server/utils/rabbit.js",
    "longname": "server/utils/rabbit.js~connect",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/utils/rabbit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 173,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "setupQueue",
    "memberof": "server/utils/rabbit.js",
    "longname": "server/utils/rabbit.js~setupQueue",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/utils/rabbit.js",
    "importStyle": "{setupQueue}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"queue\": *, \"exchange\": *}"
        ],
        "defaultRaw": {
          "queue": null,
          "exchange": null
        },
        "defaultValue": "{\"queue\":null,\"exchange\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 174,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "_getMany",
    "memberof": "server/utils/rabbit.js",
    "longname": "server/utils/rabbit.js~_getMany",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/utils/rabbit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "channel",
        "types": [
          "*"
        ]
      },
      {
        "name": "queue",
        "types": [
          "*"
        ]
      },
      {
        "name": "max",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 10,
        "defaultValue": "10"
      },
      {
        "name": "current",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 175,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "formatLogEntry",
    "memberof": "server/utils/rabbit.js",
    "longname": "server/utils/rabbit.js~formatLogEntry",
    "access": null,
    "export": false,
    "importPath": "portal.hoist.io/server/utils/rabbit.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "eventLog",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 176,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getMessages",
    "memberof": "server/utils/rabbit.js",
    "longname": "server/utils/rabbit.js~getMessages",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/utils/rabbit.js",
    "importStyle": "{getMessages}",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "queue",
        "types": [
          "*"
        ]
      },
      {
        "name": "max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 177,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "closeConnection",
    "memberof": "server/utils/rabbit.js",
    "longname": "server/utils/rabbit.js~closeConnection",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/utils/rabbit.js",
    "importStyle": "{closeConnection}",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 178,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "server/utils/string_utils.js",
    "memberof": null,
    "longname": "server/utils/string_utils.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "export function sanitiseName(name) {\n  var lowerCaseString = name.toLowerCase();\n  return lowerCaseString.replace(/\\W+/g, \"\");\n}\n"
  },
  {
    "__docId__": 179,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "sanitiseName",
    "memberof": "server/utils/string_utils.js",
    "longname": "server/utils/string_utils.js~sanitiseName",
    "access": null,
    "export": true,
    "importPath": "portal.hoist.io/server/utils/string_utils.js",
    "importStyle": "{sanitiseName}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 181,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 182,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 183,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 184,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 185,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 186,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 187,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 188,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 189,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 190,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 191,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 192,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 193,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 194,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 195,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 196,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 197,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 198,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 199,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 200,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 201,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 202,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 203,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 204,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 205,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 206,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 207,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 208,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 209,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 210,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 211,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 212,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 213,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 214,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 215,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 216,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 217,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 218,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 219,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 220,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 221,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 222,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 223,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 224,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 225,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 226,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 227,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 229,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 230,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 231,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 232,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 233,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 234,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 235,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 236,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 237,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/controllers/connector_controller_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import sinon from 'sinon';\nimport {expect} from 'chai';\nimport {ConnectorSetting} from '@hoist/model';\nimport {ConnectorController} from '../../../../src/server/areas/connector/connector_controller';\nimport {ConnectorLogic} from '../../../../src/server/logic';\nimport nock from 'nock';\nimport url from 'url';\n/** @test {ConnectorController} */\ndescribe('ConnectorController', () => {\n  let controller;\n  before(() => {\n    controller = new ConnectorController();\n  });\n  /** @test {ConnectorController#list} */\n  describe('#list', () => {\n    let connectors = [\n      {\n        connectorType: 'test-connector',\n        key: 'connector-1'\n      }, {\n        connectorType: 'test-connector2',\n        key: 'connector-2'\n      }\n    ]\n    let request = {\n      auth: {\n        credentials: {\n          application: 'applicationid'\n        }\n      }\n    };\n    let reply = sinon.stub();\n    before(() => {\n      sinon\n        .stub(ConnectorSetting, 'findAsync')\n        .returns(connectors);\n      return controller.list(request, reply);\n    });\n    it('returns list of orgs current connectors', () => {\n      return expect(reply)\n        .to\n        .have\n        .been\n        .calledWith([\n          sinon.match({\n            key: 'connector-1',\n            events: [\n              {\n                description: '',\n                name: 'new:mention',\n                connector: 'connector-1',\n                key: 'connector-1:new:mention'\n              }, {\n                description: '',\n                name: 'modified:mention',\n                connector: 'connector-1',\n                key: 'connector-1:modified:mention'\n              }\n            ]\n          }),\n          sinon.match({\n            key: 'connector-2',\n            events: [\n              {\n                description: 'a new thing is created',\n                name: 'new:thing',\n                connector: 'connector-2',\n                key: 'connector-2:new:thing'\n              }\n            ]\n          })\n        ]);\n    });\n    it('loads up connectors based on current application', () => {\n      return expect(ConnectorSetting.findAsync)\n        .to\n        .have\n        .been\n        .calledWith({application: 'applicationid'});\n    })\n    after(() => {\n      ConnectorSetting\n        .findAsync\n        .restore();\n    });\n  });\n  describe('#getAvailable', () => {});\n  describe('#getTriggers', () => {});\n  describe('#connect', () => {\n    let request = {\n      auth: {\n        credentials: {\n          application: {\n            slug: 'appslug'\n          },\n          organisation: {\n            slug: 'orgslug'\n          }\n        }\n      },\n      payload: {\n        connectorType: 'test-connector'\n      }\n    };\n    let reply = sinon.stub();\n\n    let bouncerRequest;\n    before(() => {\n      sinon\n        .stub(ConnectorLogic, 'setupDefaultConnector')\n        .returns(Promise.resolve({key: 'connector-key'}));\n      nock('http://bouncer.hoist.test')\n        .get('/initiate/orgslug/appslug/connector-key')\n        .query(true)\n        .reply(302, function (uri, requestBody) {\n          bouncerRequest = url.parse(uri, true);\n          return \"\"\n        }, {'Location': 'http://auth-portal.test'});\n      return controller.connect(request, reply);\n    });\n    after(() => {\n      ConnectorLogic\n        .setupDefaultConnector\n        .restore();\n      nock.restore();\n    })\n    it('should return redirect url', () => {\n      return expect(reply)\n        .to\n        .have\n        .been\n        .calledWith({uri: 'http://auth-portal.test'})\n    });\n    it('should request the correct bucket key to bouncer', () => {\n      return expect(bouncerRequest.query.bucketKey)\n        .to\n        .eql('default');\n    });\n    it('should pass correct return url to bouncer', () => {\n      return expect(bouncerRequest.query.returnUrl)\n        .to\n        .eql('http://portal.hoist.test/orgslug/appslug/connector/connector-key')\n    });\n  });\n});\n"
  },
  {
    "__docId__": 238,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe0",
    "testId": 0,
    "memberof": "tests/server/unit_tests/controllers/connector_controller_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0",
    "access": null,
    "description": "ConnectorController",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ConnectorController}"
      }
    ],
    "testTargets": [
      "ConnectorController"
    ]
  },
  {
    "__docId__": 239,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe1",
    "testId": 1,
    "memberof": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe1",
    "access": null,
    "description": "#list",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ConnectorController#list}"
      }
    ],
    "testTargets": [
      "ConnectorController#list"
    ]
  },
  {
    "__docId__": 240,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it2",
    "testId": 2,
    "memberof": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe1",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe1.it2",
    "access": null,
    "description": "returns list of orgs current connectors",
    "lineNumber": 39
  },
  {
    "__docId__": 241,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it3",
    "testId": 3,
    "memberof": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe1",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe1.it3",
    "access": null,
    "description": "loads up connectors based on current application",
    "lineNumber": 74
  },
  {
    "__docId__": 242,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe4",
    "testId": 4,
    "memberof": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe4",
    "access": null,
    "description": "#getAvailable",
    "lineNumber": 87
  },
  {
    "__docId__": 243,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe5",
    "testId": 5,
    "memberof": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe5",
    "access": null,
    "description": "#getTriggers",
    "lineNumber": 88
  },
  {
    "__docId__": 244,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe6",
    "testId": 6,
    "memberof": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe6",
    "access": null,
    "description": "#connect",
    "lineNumber": 89
  },
  {
    "__docId__": 245,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it7",
    "testId": 7,
    "memberof": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe6",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe6.it7",
    "access": null,
    "description": "should return redirect url",
    "lineNumber": 127
  },
  {
    "__docId__": 246,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it8",
    "testId": 8,
    "memberof": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe6",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe6.it8",
    "access": null,
    "description": "should request the correct bucket key to bouncer",
    "lineNumber": 134
  },
  {
    "__docId__": 247,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it9",
    "testId": 9,
    "memberof": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe6",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/connector_controller_tests.js~describe0.describe6.it9",
    "access": null,
    "description": "should pass correct return url to bouncer",
    "lineNumber": 139
  },
  {
    "__docId__": 248,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/controllers/editor_controller_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/controllers/editor_controller_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import sinon from 'sinon';\nimport {expect} from 'chai';\nimport {EditorController} from '../../../../src/server/areas/editor/editor_controller';\nimport {EditorLogic, ConnectorLogic} from '../../../../src/server/logic';\n/** @test {EditorController} */\ndescribe('EditorController', () => {\n  let controller;\n  before(() => {\n    controller = new EditorController();\n  });\n  /** @test {ConnectorController#list} */\n  describe('#state', () => {\n    let connectors = [\n      {\n        key: 'connector-1',\n        events: [\n          {\n            description: '',\n            name: 'new:mention',\n            connector: 'connector-1',\n            key: 'connector-1:new:mention'\n          }, {\n            description: '',\n            name: 'modified:mention',\n            connector: 'connector-1',\n            key: 'connector-1:modified:mention'\n          }\n        ]\n      }, {\n        key: 'connector-2',\n        events: [\n          {\n            key: 'connector-2:new:thing',\n            description: 'a new thing is created',\n            name: 'new:thing',\n            connector: 'connector-2'\n          }\n        ]\n      }\n    ]\n    let request = {\n      auth: {\n        credentials: {\n          application: {\n            _id: 'applicationid',\n            settings: {\n              live: {\n                on: {\n                  'my:event': {},\n                  \"connector-2:new:thing\": {}\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n    let reply = sinon.stub();\n    before(() => {\n      sinon\n        .stub(ConnectorLogic, 'getConnectorsForApplication')\n        .returns(Promise.resolve(connectors));\n      sinon\n        .stub(EditorLogic, 'getCodeForEvent')\n        .returns(Promise.resolve('this is some code'))\n      return controller.state(request, reply);\n    });\n    it('returns list of current connectors and code', () => {\n      return expect(reply)\n        .to\n        .have\n        .been\n        .calledWith(sinon.match({\n          connectors,\n          events: connectors[0]\n            .events\n            .concat(connectors[1].events)\n            .concat({description: \"\", key: \"my:event\", name: \"my:event\"}),\n          code: {\n            event: 'connector-1:new:mention',\n            script: 'this is some code'\n          }\n        }));\n    });\n    after(() => {\n      ConnectorLogic\n        .getConnectorsForApplication\n        .restore();\n      EditorLogic\n        .getCodeForEvent\n        .restore();\n    });\n  });\n});\n"
  },
  {
    "__docId__": 249,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe10",
    "testId": 10,
    "memberof": "tests/server/unit_tests/controllers/editor_controller_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/controllers/editor_controller_tests.js~describe10",
    "access": null,
    "description": "EditorController",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{EditorController}"
      }
    ],
    "testTargets": [
      "EditorController"
    ]
  },
  {
    "__docId__": 250,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe11",
    "testId": 11,
    "memberof": "tests/server/unit_tests/controllers/editor_controller_tests.js~describe10",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/controllers/editor_controller_tests.js~describe10.describe11",
    "access": null,
    "description": "#state",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ConnectorController#list}"
      }
    ],
    "testTargets": [
      "ConnectorController#list"
    ]
  },
  {
    "__docId__": 251,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it12",
    "testId": 12,
    "memberof": "tests/server/unit_tests/controllers/editor_controller_tests.js~describe10.describe11",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/editor_controller_tests.js~describe10.describe11.it12",
    "access": null,
    "description": "returns list of current connectors and code",
    "lineNumber": 68
  },
  {
    "__docId__": 252,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/controllers/session_controller_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {\n  expect\n}\nfrom 'chai';\nimport {\n  SessionController\n}\nfrom '../../../../src/server/areas/session/session_controller';\nimport sinon from 'sinon';\nimport {\n  SessionLogic\n}\nfrom '../../../../src/server/logic';\n\n/** @test {SessionController} */\ndescribe('SessionController', () => {\n  let controller;\n  before(() => {\n    controller = new SessionController();\n  });\n\n  /** @test {SessionController#routes} */\n  describe('#routes', () => {\n    let routes;\n    before(() => {\n      routes = controller.routes();\n    });\n    it('defines a create route', () => {\n      return expect(routes)\n        .to\n        .contain({\n          \"config\": {\n            \"auth\": {\n              \"mode\": \"try\",\n              \"strategy\": \"session\"\n            },\n            \"handler\": controller.create,\n            \"plugins\": {\n              \"hapi-auth-cookie\": {\n                \"redirectTo\": false\n              }\n            }\n          },\n          \"method\": \"POST\",\n          \"path\": \"/session\"\n        })\n    });\n  });\n\n  /** @test {SessionController#create} */\n  describe('#create', () => {\n    let request = {\n      info: {\n        remoteAddress: 'unit-test-ip-address'\n      },\n      headers: {},\n      payload: {\n        email: 'unittest@hoist.io',\n        password: 'password'\n      },\n      cookieAuth: {\n        set: sinon.stub()\n      }\n\n    };\n    let reply = sinon.stub();\n    let user = {\n      name: 'users'\n    };\n    let session = {\n      _id: 'some id',\n      key: 'some key',\n      user: 'userid',\n      organisation: 'organisationid',\n      application: 'applicationid'\n    };\n    let sessionDetails = {\n      user: {}\n    }\n    before(() => {\n      sinon\n        .stub(SessionLogic, 'ensureLogin')\n        .returns(Promise.resolve(user));\n      sinon\n        .stub(SessionLogic, 'logLogin')\n        .returns(Promise.resolve());\n      sinon\n        .stub(SessionLogic, 'createSessionForUser')\n        .returns(Promise.resolve(session));\n      sinon\n        .stub(SessionLogic, 'getSessionDetails')\n        .returns(Promise.resolve(sessionDetails));\n    });\n    after(() => {\n      SessionLogic\n        .ensureLogin\n        .restore();\n      SessionLogic\n        .logLogin\n        .restore();\n      SessionLogic\n        .createSessionForUser\n        .restore();\n      SessionLogic\n        .getSessionDetails\n        .restore();\n    });\n    describe('if user validation fails', () => {\n      before(() => {\n        SessionLogic\n          .ensureLogin\n          .throws();\n        return controller.create(request, reply);\n      });\n      it('replies with error response', () => {\n        return expect(reply)\n          .to\n          .have\n          .been\n          .calledWith(sinon.match({\n            code: 500,\n            message: 'An unexpected HoistError occurred.'\n          }));\n      });\n      it('logs an invalid login', () => {\n        return expect(SessionLogic.logLogin)\n          .to\n          .have\n          .been\n          .calledWith({\n            email: 'unittest@hoist.io',\n            password: 'password',\n            ipAddress: 'unit-test-ip-address'\n          }, false);\n      });\n      after(() => {\n        SessionLogic\n          .ensureLogin\n          .returns(Promise.resolve(user));\n        SessionLogic\n          .ensureLogin\n          .reset();\n        SessionLogic\n          .createSessionForUser\n          .reset();\n        SessionLogic\n          .getSessionDetails\n          .reset();\n        SessionLogic\n          .logLogin\n          .reset();\n        reply.reset();\n      });\n    });\n    describe('if validation succeeds', () => {\n      before(() => {\n        return controller.create(request, reply);\n      });\n      it('replies with session details', () => {\n        return expect(reply)\n          .to\n          .have\n          .been\n          .calledWith(sessionDetails);\n      });\n      it('saves session to cookie', () => {\n        return expect(request.cookieAuth.set)\n          .to\n          .have\n          .been\n          .calledWith(session);\n      });\n      it('logs a valid login', () => {\n        return expect(SessionLogic.logLogin)\n          .to\n          .have\n          .been\n          .calledWith({\n            email: 'unittest@hoist.io',\n            password: 'password',\n            ipAddress: 'unit-test-ip-address'\n          }, true);\n      });\n      after(() => {\n        SessionLogic\n          .ensureLogin\n          .reset();\n        SessionLogic\n          .createSessionForUser\n          .reset();\n        SessionLogic\n          .getSessionDetails\n          .reset();\n        SessionLogic\n          .logLogin\n          .reset();\n        reply.reset();\n      });\n    });\n    describe('if header contains x-real-ip', () => {\n      before(() => {\n        request.headers['x-real-ip'] = 'ip-address-override';\n        return controller.create(request, reply);\n      });\n      it('uses the override ip address to log login attempt', () => {\n        return expect(SessionLogic.logLogin)\n          .to\n          .have\n          .been\n          .calledWith(sinon.match({\n            ipAddress: 'ip-address-override'\n          }));\n      });\n      it('uses override ip to validate user', () => {\n        return expect(SessionLogic.ensureLogin)\n          .to\n          .have\n          .been\n          .calledWith(sinon.match({\n            ipAddress: 'ip-address-override'\n          }))\n      });\n      after(() => {\n        delete request.headers['x-real-ip'];\n        SessionLogic\n          .ensureLogin\n          .reset();\n        SessionLogic\n          .createSessionForUser\n          .reset();\n        SessionLogic\n          .getSessionDetails\n          .reset();\n        SessionLogic\n          .logLogin\n          .reset();\n        reply.reset();\n      });\n    });\n  });\n  /** @test {SessionController#destroy} */\n  describe('#destroy', () => {\n    let request = {\n      cookieAuth: {\n        clear: sinon.stub()\n      },\n      auth: {\n        isAuthenticated: true,\n\n      }\n    };\n    let reply = sinon.stub();\n    before(() => {\n      return controller.destroy(request, reply);\n    });\n    it('returns simple message', () => {\n      return expect(reply)\n        .to\n        .have\n        .been\n        .calledWith({\n          ok: true\n        });\n    });\n    it('clears current session', () => {\n      return expect(request.cookieAuth.clear)\n        .to.have.been.called;\n    });\n\n  });\n});"
  },
  {
    "__docId__": 253,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe13",
    "testId": 13,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13",
    "access": null,
    "description": "SessionController",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SessionController}"
      }
    ],
    "testTargets": [
      "SessionController"
    ]
  },
  {
    "__docId__": 254,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe14",
    "testId": 14,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe14",
    "access": null,
    "description": "#routes",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SessionController#routes}"
      }
    ],
    "testTargets": [
      "SessionController#routes"
    ]
  },
  {
    "__docId__": 255,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it15",
    "testId": 15,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe14",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe14.it15",
    "access": null,
    "description": "defines a create route",
    "lineNumber": 28
  },
  {
    "__docId__": 256,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe16",
    "testId": 16,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16",
    "access": null,
    "description": "#create",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SessionController#create}"
      }
    ],
    "testTargets": [
      "SessionController#create"
    ]
  },
  {
    "__docId__": 257,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe17",
    "testId": 17,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe17",
    "access": null,
    "description": "if user validation fails",
    "lineNumber": 108
  },
  {
    "__docId__": 258,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it18",
    "testId": 18,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe17",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe17.it18",
    "access": null,
    "description": "replies with error response",
    "lineNumber": 115
  },
  {
    "__docId__": 259,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it19",
    "testId": 19,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe17",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe17.it19",
    "access": null,
    "description": "logs an invalid login",
    "lineNumber": 125
  },
  {
    "__docId__": 260,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe20",
    "testId": 20,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe20",
    "access": null,
    "description": "if validation succeeds",
    "lineNumber": 155
  },
  {
    "__docId__": 261,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it21",
    "testId": 21,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe20",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe20.it21",
    "access": null,
    "description": "replies with session details",
    "lineNumber": 159
  },
  {
    "__docId__": 262,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it22",
    "testId": 22,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe20",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe20.it22",
    "access": null,
    "description": "saves session to cookie",
    "lineNumber": 166
  },
  {
    "__docId__": 263,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it23",
    "testId": 23,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe20",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe20.it23",
    "access": null,
    "description": "logs a valid login",
    "lineNumber": 173
  },
  {
    "__docId__": 264,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe24",
    "testId": 24,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe24",
    "access": null,
    "description": "if header contains x-real-ip",
    "lineNumber": 200
  },
  {
    "__docId__": 265,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it25",
    "testId": 25,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe24",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe24.it25",
    "access": null,
    "description": "uses the override ip address to log login attempt",
    "lineNumber": 205
  },
  {
    "__docId__": 266,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it26",
    "testId": 26,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe24",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe16.describe24.it26",
    "access": null,
    "description": "uses override ip to validate user",
    "lineNumber": 214
  },
  {
    "__docId__": 267,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe27",
    "testId": 27,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe27",
    "access": null,
    "description": "#destroy",
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{SessionController#destroy}"
      }
    ],
    "testTargets": [
      "SessionController#destroy"
    ]
  },
  {
    "__docId__": 268,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it28",
    "testId": 28,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe27",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe27.it28",
    "access": null,
    "description": "returns simple message",
    "lineNumber": 256
  },
  {
    "__docId__": 269,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it29",
    "testId": 29,
    "memberof": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe27",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/controllers/session_controller_tests.js~describe13.describe27.it29",
    "access": null,
    "description": "clears current session",
    "lineNumber": 265
  },
  {
    "__docId__": 270,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/logic/application_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/logic/application_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as ApplicationLogic from '../../../../src/server/logic/application';\nimport {_mongoose, Application} from '@hoist/model';\nimport config from 'config';\nimport {expect} from 'chai';\nimport path from 'path';\n\ndescribe('ApplicationLogic', () => {\n  /** @test {getApplicationPath} */\n  describe('#getApplicationPath', () => {\n    let appPath;\n    before(() => {\n      return appPath = _mongoose\n        .connectAsync(config.get('Hoist.mongo.core.connectionString'))\n        .then(() => {\n          return Application.findOneAsync({_id: 'test-app'})\n        })\n        .then((application) => {\n          return ApplicationLogic.getApplicationPath(application);\n        });\n    });\n    after(() => {\n      return _mongoose.disconnectAsync();\n    });\n    it('returns application real path', () => {\n      return expect(appPath)\n        .to\n        .become(path.resolve(__dirname, '../../../fixtures/deploys/test-org/test-app/release'));\n    });\n  });\n});\n"
  },
  {
    "__docId__": 271,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe30",
    "testId": 30,
    "memberof": "tests/server/unit_tests/logic/application_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/logic/application_tests.js~describe30",
    "access": null,
    "description": "ApplicationLogic",
    "lineNumber": 7
  },
  {
    "__docId__": 272,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe31",
    "testId": 31,
    "memberof": "tests/server/unit_tests/logic/application_tests.js~describe30",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/application_tests.js~describe30.describe31",
    "access": null,
    "description": "#getApplicationPath",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{getApplicationPath}"
      }
    ],
    "testTargets": [
      "getApplicationPath"
    ]
  },
  {
    "__docId__": 273,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it32",
    "testId": 32,
    "memberof": "tests/server/unit_tests/logic/application_tests.js~describe30.describe31",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/application_tests.js~describe30.describe31.it32",
    "access": null,
    "description": "returns application real path",
    "lineNumber": 24
  },
  {
    "__docId__": 274,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/logic/connector_logic_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/logic/connector_logic_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {ConnectorSetting} from '@hoist/model';\nimport {ConnectorLogic} from '../../../../src/server/logic';\nimport sinon from 'sinon';\nimport {expect} from 'chai';\nimport config from 'config';\ndescribe('ConnectorLogic', () => {\n  describe('#setupDefaultConnector', () => {\n    before(() => {});\n    describe('if no connector exists', () => {\n      let connector;\n      let expectedConnector = {\n        expected: true\n      };\n      let rootConnector = {\n        name: 'test connector',\n        connectorType: 'hoist-connector-test',\n        settings: {\n          one: 1,\n          two: 2\n        },\n        defaultKey: 'test'\n      };\n      let connectorType = 'connectorType';\n      let application = {\n        _id: 'appid'\n      };\n      before(() => {\n        sinon\n          .stub(ConnectorSetting.prototype, 'saveAsync')\n          .returns(Promise.resolve(expectedConnector))\n        sinon\n          .stub(ConnectorSetting, 'findOneAsync')\n          .returns(Promise.resolve(rootConnector));\n        sinon\n          .stub(ConnectorSetting, 'countAsync')\n          .returns(Promise.resolve(0));\n        return (connector = ConnectorLogic.setupDefaultConnector(application, connectorType));\n      });\n      after(() => {\n        ConnectorSetting\n          .prototype\n          .saveAsync\n          .restore();\n        ConnectorSetting\n          .findOneAsync\n          .restore();\n        ConnectorSetting\n          .countAsync\n          .restore();\n      })\n      it('should save a new connector', () => {\n        return expect(ConnectorSetting.prototype.saveAsync)\n          .to\n          .have\n          .been\n          .calledOn(sinon.match((connector) => {\n            return expect(connector.key)\n              .to\n              .eql('test') && expect(connector.application)\n              .to\n              .eql('appid') && expect(connector.settings.one)\n              .to\n              .eql(1);\n          }));\n      });\n      it('should return saved connector', () => {\n        return expect(connector)\n          .to\n          .become(expectedConnector)\n      });\n      it('should look up root connector', () => {\n        return expect(ConnectorSetting.findOneAsync)\n          .to\n          .have\n          .been\n          .calledWith({\n            key: \"hoist-root-\" + connectorType,\n            application: config.get('Hoist.admin.applicationId')\n          });\n      });\n    });\n    describe('if default connector key already exists', () => {\n      let connector;\n      let expectedConnector = {\n        expected: true\n      };\n      let rootConnector = {\n        name: 'test connector',\n        connectorType: 'hoist-connector-test',\n        settings: {\n          one: 1,\n          two: 2\n        },\n        defaultKey: 'test'\n      };\n      let connectorType = 'connectorType';\n      let application = {\n        _id: 'appid'\n      };\n      before(() => {\n        sinon\n          .stub(ConnectorSetting.prototype, 'saveAsync')\n          .returns(Promise.resolve(expectedConnector))\n        sinon\n          .stub(ConnectorSetting, 'findOneAsync')\n          .returns(Promise.resolve(rootConnector));\n        sinon\n          .stub(ConnectorSetting, 'countAsync')\n          .onCall(0)\n          .returns(Promise.resolve(1));\n        ConnectorSetting\n          .countAsync\n          .returns(Promise.resolve(0));\n        return (connector = ConnectorLogic.setupDefaultConnector(application, connectorType));\n      });\n      it('should append a random number to key', () => {\n        return expect(ConnectorSetting.prototype.saveAsync)\n          .to\n          .have\n          .been\n          .calledOn(sinon.match((connector) => {\n            return expect(connector.key)\n              .to\n              .match(/^test[0-9]{1,4}/);\n          }));\n      });\n    });\n  });\n})\n"
  },
  {
    "__docId__": 275,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe33",
    "testId": 33,
    "memberof": "tests/server/unit_tests/logic/connector_logic_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33",
    "access": null,
    "description": "ConnectorLogic",
    "lineNumber": 6
  },
  {
    "__docId__": 276,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe34",
    "testId": 34,
    "memberof": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34",
    "access": null,
    "description": "#setupDefaultConnector",
    "lineNumber": 7
  },
  {
    "__docId__": 277,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe35",
    "testId": 35,
    "memberof": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34.describe35",
    "access": null,
    "description": "if no connector exists",
    "lineNumber": 9
  },
  {
    "__docId__": 278,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it36",
    "testId": 36,
    "memberof": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34.describe35",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34.describe35.it36",
    "access": null,
    "description": "should save a new connector",
    "lineNumber": 51
  },
  {
    "__docId__": 279,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it37",
    "testId": 37,
    "memberof": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34.describe35",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34.describe35.it37",
    "access": null,
    "description": "should return saved connector",
    "lineNumber": 66
  },
  {
    "__docId__": 280,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it38",
    "testId": 38,
    "memberof": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34.describe35",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34.describe35.it38",
    "access": null,
    "description": "should look up root connector",
    "lineNumber": 71
  },
  {
    "__docId__": 281,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe39",
    "testId": 39,
    "memberof": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34.describe39",
    "access": null,
    "description": "if default connector key already exists",
    "lineNumber": 82
  },
  {
    "__docId__": 282,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it40",
    "testId": 40,
    "memberof": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34.describe39",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/connector_logic_tests.js~describe33.describe34.describe39.it40",
    "access": null,
    "description": "should append a random number to key",
    "lineNumber": 116
  },
  {
    "__docId__": 283,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/logic/editor_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/logic/editor_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as EditorLogic from '../../../../src/server/logic/editor';\nimport * as ApplicationLogic from '../../../../src/server/logic/application';\nimport * as EventLogic from '../../../../src/server/logic/event';\nimport {Application} from '@hoist/model';\nimport sinon from 'sinon';\nimport {expect} from 'chai';\nimport path from 'path';\ndescribe('EditorLogic', () => {\n  describe('#getCodeForEvent', () => {\n    let code;\n    let application = {};\n    let query = {\n      populate: sinon\n        .stub()\n        .returnsThis(),\n      exec: sinon\n        .stub()\n        .returns(Promise.resolve(application))\n    }\n    before(() => {\n      let modulePath = path.resolve(__dirname, '../../../fixtures/test-application/');\n      sinon\n        .stub(Application, 'findOne')\n        .returns(query);\n      sinon\n        .stub(EventLogic, 'mapEventToModule')\n        .returns(Promise.resolve({name: 'module', src: 'module.js'}));\n      sinon\n        .stub(ApplicationLogic, 'getApplicationPath')\n        .returns(Promise.resolve(modulePath));\n      return code = EditorLogic.getCodeForEvent('app-id', 'eventName');\n    });\n    after(() => {\n      Application\n        .findOne\n        .restore();\n      EventLogic\n        .mapEventToModule\n        .restore();\n      ApplicationLogic\n        .getApplicationPath\n        .restore();\n    });\n    it('should return code', () => {\n      return expect(code)\n        .to\n        .eventually\n        .eql(`module.exports = function () {}\n`);\n    });\n  });\n});\n"
  },
  {
    "__docId__": 284,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe41",
    "testId": 41,
    "memberof": "tests/server/unit_tests/logic/editor_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/logic/editor_tests.js~describe41",
    "access": null,
    "description": "EditorLogic",
    "lineNumber": 8
  },
  {
    "__docId__": 285,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe42",
    "testId": 42,
    "memberof": "tests/server/unit_tests/logic/editor_tests.js~describe41",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/editor_tests.js~describe41.describe42",
    "access": null,
    "description": "#getCodeForEvent",
    "lineNumber": 9
  },
  {
    "__docId__": 286,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it43",
    "testId": 43,
    "memberof": "tests/server/unit_tests/logic/editor_tests.js~describe41.describe42",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/editor_tests.js~describe41.describe42.it43",
    "access": null,
    "description": "should return code",
    "lineNumber": 44
  },
  {
    "__docId__": 287,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/logic/email_logic_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/logic/email_logic_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as EmailLogic from '../../../../src/server/logic/emails';\nimport {\n  Client as PostmarkClient\n} from 'postmark';\nimport sinon from 'sinon';\nimport {\n  expect\n} from 'chai';\n\ndescribe(\"#sendForgottenPasswordEmail\", () => {\n  before(() => {\n    sinon\n      .stub(PostmarkClient.prototype, 'send')\n      .yields();\n    return EmailLogic.sendForgottenPasswordEmail('test@hoi.io', 'ACTIVATIONCODE');\n  });\n  it('should send correct email', () => {\n    return expect(PostmarkClient.prototype.send)\n      .to.have.been\n      .calledWith(sinon.match((em) => {\n        expect(em.From)\n          .to.eql('Hoist <hoist@notifications.hoi.io>') &&\n          expect(em.ReplyTo)\n          .to.eql('Hoist <support@hoist.io>') &&\n          expect(em.To)\n          .to.eql('test@hoi.io') &&\n          expect(em.Subject)\n          .to.eql('Hoist Password Reset') &&\n          expect(em.TextBody)\n          .to.contain('/forgot-password/ACTIVATIONCODE') &&\n          expect(em.HtmlBody)\n          .to.contain('/forgot-password/ACTIVATIONCODE');\n        return true;\n      }));\n  });\n});\n"
  },
  {
    "__docId__": 288,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe44",
    "testId": 44,
    "memberof": "tests/server/unit_tests/logic/email_logic_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/logic/email_logic_tests.js~describe44",
    "access": null,
    "description": "#sendForgottenPasswordEmail",
    "lineNumber": 10
  },
  {
    "__docId__": 289,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it45",
    "testId": 45,
    "memberof": "tests/server/unit_tests/logic/email_logic_tests.js~describe44",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/email_logic_tests.js~describe44.it45",
    "access": null,
    "description": "should send correct email",
    "lineNumber": 17
  },
  {
    "__docId__": 290,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/logic/event_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/logic/event_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import * as EventLogic from '../../../../src/server/logic/event';\nimport settings from '../../../fixtures/test-application/hoist.json';\nimport {expect} from 'chai';\nimport setup from '../../../fixtures/setup';\ndescribe(\"EventLogic\", () => {\n  /** @test {mapEventToModule} */\n  describe(\"mapEventToModule\", () => {\n    let _result;\n    before(() => {\n      return EventLogic\n        .mapEventToModule('test-event', {live: settings})\n        .then((module) => {\n          _result = module;\n        });\n    });\n    it('returns correct module listing', () => {\n      return expect(_result)\n        .to\n        .eql({name: 'test_module', src: './modules/test.js'})\n    });\n  });\n});\n"
  },
  {
    "__docId__": 291,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe46",
    "testId": 46,
    "memberof": "tests/server/unit_tests/logic/event_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/logic/event_tests.js~describe46",
    "access": null,
    "description": "EventLogic",
    "lineNumber": 5
  },
  {
    "__docId__": 292,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe47",
    "testId": 47,
    "memberof": "tests/server/unit_tests/logic/event_tests.js~describe46",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/event_tests.js~describe46.describe47",
    "access": null,
    "description": "mapEventToModule",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{mapEventToModule}"
      }
    ],
    "testTargets": [
      "mapEventToModule"
    ]
  },
  {
    "__docId__": 293,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it48",
    "testId": 48,
    "memberof": "tests/server/unit_tests/logic/event_tests.js~describe46.describe47",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/event_tests.js~describe46.describe47.it48",
    "access": null,
    "description": "returns correct module listing",
    "lineNumber": 16
  },
  {
    "__docId__": 294,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/logic/organisation_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/logic/organisation_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "describe('OrganisationLogic', () => {\n  describe('GetOrganisationBySlug', () => {});\n  describe('#create',()=>{\n    \n  });\n});\n"
  },
  {
    "__docId__": 295,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe49",
    "testId": 49,
    "memberof": "tests/server/unit_tests/logic/organisation_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/logic/organisation_tests.js~describe49",
    "access": null,
    "description": "OrganisationLogic",
    "lineNumber": 1
  },
  {
    "__docId__": 296,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe50",
    "testId": 50,
    "memberof": "tests/server/unit_tests/logic/organisation_tests.js~describe49",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/organisation_tests.js~describe49.describe50",
    "access": null,
    "description": "GetOrganisationBySlug",
    "lineNumber": 2
  },
  {
    "__docId__": 297,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe51",
    "testId": 51,
    "memberof": "tests/server/unit_tests/logic/organisation_tests.js~describe49",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/organisation_tests.js~describe49.describe51",
    "access": null,
    "description": "#create",
    "lineNumber": 3
  },
  {
    "__docId__": 298,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/logic/session_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/logic/session_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {SessionLogic} from '../../../../src/server/logic';\nimport chai, {expect} from 'chai';\nimport {\n  IpLog,\n  LoginLog,\n  HoistUser,\n  Session,\n  Application,\n  Organisation\n} from '@hoist/model';\nimport sinon from 'sinon';\n\ndescribe('SessionLogic', () => {\n  /** @test {ensureLogin} */\n  describe('#ensureLogin', () => {\n    let validLogin = {\n      email: 'UnitTest@Hoist.Io',\n      password: 'some password',\n      ipAddress: 'some ip address'\n    }\n    let user = {\n      verifyPassword: sinon\n        .stub()\n        .returns(true)\n    }\n    before(() => {\n      sinon\n        .stub(IpLog, 'assertIP')\n        .returns(Promise.resolve());\n      sinon\n        .stub(LoginLog, 'assertUser')\n        .returns(Promise.resolve())\n      sinon\n        .stub(HoistUser, 'findOneAsync')\n        .returns(user);\n    });\n    after(() => {\n      IpLog\n        .assertIP\n        .restore();\n      LoginLog\n        .assertUser\n        .restore()\n      HoistUser\n        .findOneAsync\n        .restore();\n    });\n    describe('with missing email', () => {\n      let loginResult;\n      before(() => {\n        //remove email without modifying the original object\n        let details = Object.assign({}, validLogin);\n        delete details.email;\n        loginResult = SessionLogic.ensureLogin(details);\n      });\n      it('returns rejection', () => {\n        return expect(loginResult)\n          .to\n          .be\n          .rejectedWith('invalid email supplied');\n      })\n      after(() => {\n        IpLog\n          .assertIP\n          .reset();\n      });\n    });\n    describe('with missing password', () => {\n      let loginResult;\n      before(() => {\n        //remove password without modifying the original object\n        let details = Object.assign({}, validLogin);\n        delete details.password;\n        loginResult = SessionLogic.ensureLogin(details);\n      });\n      it('returns rejection', () => {\n        return expect(loginResult)\n          .to\n          .be\n          .rejectedWith('invalid password supplied');\n      })\n      after(() => {\n        IpLog\n          .assertIP\n          .reset();\n      });\n    });\n    describe('with invalid ip address', () => {\n      let loginResult;\n      before(() => {\n        IpLog\n          .assertIP\n          .throws(new Error('this is an invalid ip address'));\n        loginResult = SessionLogic.ensureLogin(validLogin);\n      });\n      after(() => {\n        IpLog\n          .assertIP\n          .returns(Promise.resolve());\n        IpLog\n          .assertIP\n          .reset();\n      });\n      it('returns rejection', () => {\n        return expect(loginResult)\n          .to\n          .be\n          .rejectedWith('this is an invalid ip address');\n      });\n      it('doesn\\'t load user', () => {\n        return expect(HoistUser.findOneAsync).to.have.not.been.called;\n      });\n    });\n    describe('with locked username', () => {\n      let loginResult;\n      before(() => {\n        LoginLog\n          .assertUser\n          .throws(new Error('this is an invalid username'));\n        loginResult = SessionLogic.ensureLogin(validLogin);\n      });\n      it('checks lock with user', () => {\n        return expect(LoginLog.assertUser)\n          .to\n          .have\n          .been\n          .calledWith(user);\n      });\n      it('returns rejection', () => {\n        return expect(loginResult)\n          .to\n          .be\n          .rejectedWith('this is an invalid username');\n      });\n      it('doesn\\'t check user password', () => {\n        return expect(user.verifyPassword).to.have.not.been.called;\n      });\n      after(() => {\n        LoginLog\n          .assertUser\n          .returns(Promise.resolve());\n        LoginLog\n          .assertUser\n          .reset();\n        IpLog\n          .assertIP\n          .reset();\n      })\n    });\n    describe('with invalid password', () => {\n      let loginResult;\n      before(() => {\n        user\n          .verifyPassword\n          .returns(false);\n        loginResult = SessionLogic.ensureLogin(validLogin);\n      });\n      it('returns rejection', () => {\n        return expect(loginResult)\n          .to\n          .be\n          .rejectedWith('The username and/or password were not correct');\n      });\n      after(() => {\n        user\n          .verifyPassword\n          .returns(true);\n        user\n          .verifyPassword\n          .reset();\n        HoistUser\n          .findOneAsync\n          .reset();\n        LoginLog\n          .assertUser\n          .reset();\n        IpLog\n          .assertIP\n          .reset();\n      })\n    });\n    describe('with invalid username', () => {\n      let loginResult;\n      before(() => {\n        HoistUser\n          .findOneAsync\n          .returns(Promise.resolve(null));\n        loginResult = SessionLogic.ensureLogin(validLogin);\n      });\n      it('returns rejection', () => {\n        return expect(loginResult)\n          .to\n          .be\n          .rejectedWith('The username and/or password were not correct');\n      });\n      after(() => {\n        HoistUser\n          .findOneAsync\n          .returns(Promise.resolve(user));\n        user\n          .verifyPassword\n          .reset();\n        HoistUser\n          .findOneAsync\n          .reset();\n        LoginLog\n          .assertUser\n          .reset();\n        IpLog\n          .assertIP\n          .reset();\n      })\n    });\n    describe('with valid details', () => {\n      let loginResult;\n      before(() => {\n        loginResult = SessionLogic.ensureLogin(validLogin);\n      });\n      it('returns user', () => {\n        return expect(loginResult)\n          .to\n          .eventually\n          .become(user);\n      });\n      it('looks up user by lowercase email', () => {\n        return expect(HoistUser.findOneAsync)\n          .to\n          .have\n          .been\n          .calledWith({'emailAddresses.address': 'unittest@hoist.io'});\n      });\n      after(() => {\n        IpLog\n          .assertIP\n          .reset();\n        user\n          .verifyPassword\n          .reset();\n        LoginLog\n          .assertUser\n          .reset();\n        HoistUser\n          .findOneAsync\n          .reset();\n      });\n    });\n  });\n\n  /** @test {getSessionDetails} */\n  describe('#getSessionDetails', () => {\n    let result;\n    let user = {\n      organisations: [\n        'org1', 'org2'\n      ],\n      toJSON: sinon\n        .stub()\n        .returnsThis()\n    };\n    let organisation = {\n      _id: 'orgid',\n      name: 'organisation',\n      toJSON: sinon\n        .stub()\n        .returnsThis()\n    };\n    let application = {\n      _id: 'applicationid',\n      name: 'application',\n      toJSON: sinon\n        .stub()\n        .returnsThis()\n    };\n    let applications = [\n      {\n        slug: 'app1',\n        name: 'app1',\n        toJSON: sinon\n          .stub()\n          .returnsThis()\n      }, {\n        slug: 'app2',\n        name: 'app2',\n        toJSON: sinon\n          .stub()\n          .returnsThis()\n      }\n    ];\n    let organisations = [\n      {\n        slug: 'org1',\n        name: 'org1',\n        toJSON: sinon\n          .stub()\n          .returnsThis()\n      }, {\n        slug: 'org2',\n        name: 'org2',\n        toJSON: sinon\n          .stub()\n          .returnsThis()\n      }\n    ];\n    let session = {\n      user: user,\n      organisation: organisation,\n      application: application,\n      populate: sinon\n        .stub()\n        .returnsThis(),\n      execPopulate: sinon\n        .stub()\n        .returns(Promise.resolve()),\n      toJSON: sinon\n        .stub()\n        .returnsThis()\n    };\n    before(() => {\n      sinon\n        .stub(Application, 'findAsync')\n        .returns(Promise.resolve(applications));\n      sinon\n        .stub(Organisation, 'findAsync')\n        .returns(Promise.resolve(organisations));\n      return SessionLogic\n        .getSessionDetails(session)\n        .then((sessionDetails) => {\n          result = sessionDetails;\n        });\n    });\n\n    it('returns current user', () => {\n      return expect(result.user)\n        .to\n        .eql(user);\n    });\n    it('returns current organisation', () => {\n      return expect(result.organisation)\n        .to\n        .eql(organisation);\n    });\n    it('returns current application', () => {\n      return expect(result.application)\n        .to\n        .eql(application);\n    });\n    it('returns available applications', () => {\n      return expect(result.applications)\n        .to\n        .eql(applications);\n    });\n    it('returns available organisations', () => {\n      return expect(result.organisations)\n        .to\n        .eql(organisations);\n    });\n    it('looks up orgs based on user', () => {\n      return expect(Organisation.findAsync)\n        .to\n        .have\n        .been\n        .calledWith({\n          _id: {\n            $in: ['org1', 'org2']\n          }\n        }, 'slug name isPersonal')\n    });\n    it('looks up applications based on organisation', () => {\n      return expect(Application.findAsync)\n        .to\n        .have\n        .been\n        .calledWith({\n          organisation: 'orgid'\n        }, 'slug name apiKey settings');\n    })\n    after(() => {\n      Application\n        .findAsync\n        .restore();\n      Organisation\n        .findAsync\n        .restore();\n    });\n  });\n\n  /** @test {createSessionForUser} */\n  describe('#createSessionForUser', () => {\n    let sessionQuery = {\n      select: sinon\n        .stub()\n        .returnsThis(),\n      limit: sinon\n        .stub()\n        .returnsThis(),\n      sort: sinon\n        .stub()\n        .returnsThis(),\n      exec: sinon\n        .stub()\n        .returns(Promise.resolve([]))\n    }\n    let session = {\n      name: 'session'\n    };\n    let user = {\n      _id: 'userid',\n      name: 'user',\n      organisations: ['org1', 'org2']\n    };\n    before(() => {\n      sinon\n        .stub(Session, 'find')\n        .returns(sessionQuery)\n      sinon\n        .stub(Session.prototype, 'saveAsync')\n        .returns(Promise.resolve(session));\n    })\n    after(() => {\n      Session\n        .find\n        .restore();\n    })\n    describe('with previous session', () => {\n      let previousSession = {\n        organisation: 'organisationid',\n        application: 'applicationid'\n      }\n      before(() => {\n        sessionQuery\n          .exec\n          .returns(Promise.resolve([previousSession]));\n      });\n      after(() => {\n        sessionQuery\n          .exec\n          .returns(Promise.resolve([]));\n      });\n      describe('with a selected organisation and application', () => {\n        let result;\n        before(() => {\n          result = SessionLogic.createSessionForUser(user);\n        })\n        it('loads the correct session', () => {\n          return expect(Session.find)\n            .to\n            .have\n            .been\n            .calledWith({user: 'userid'});\n        });\n        it('selects only the organisation and application fields', () => {\n          return expect(sessionQuery.select)\n            .to\n            .have\n            .been\n            .calledWith({_id: -1, application: 1, organisation: 1});\n        });\n        it('creates session with matching application and organisation', () => {\n          return expect(Session.prototype.saveAsync)\n            .to\n            .have\n            .been\n            .calledOn(sinon.match({organisation: 'organisationid', application: 'applicationid', user: 'userid'}));\n        });\n        it('returns saved session', () => {\n          return expect(result)\n            .to\n            .eventually\n            .become(session);\n        });\n        after(() => {\n          Session\n            .find\n            .reset();\n          Session\n            .prototype\n            .saveAsync\n            .reset();\n        })\n      });\n      describe('without a selected organisation and application', () => {\n        let result;\n        before(() => {\n          delete previousSession.organisation;\n          delete previousSession.application;\n          let application = {\n            _id: 'app2'\n          };\n          let applicationQuery = {\n            limit:sinon.stub().returnsThis(),\n            sort:sinon.stub().returnsThis(),\n            select: sinon.stub().returnsThis(),\n            exec: sinon\n              .stub()\n              .returns(Promise.resolve([application]))\n          };\n          sinon\n            .stub(Application, 'find')\n            .returns(applicationQuery);\n          result = SessionLogic.createSessionForUser(user);\n        });\n        it('creates session with last created organisation and last created application', () => {\n          return expect(Session.prototype.saveAsync)\n            .to\n            .have\n            .been\n            .calledOn(sinon.match({user: 'userid', organisation: 'org2', application: 'app2'}));\n        });\n        it('finds last created application', () => {\n          return expect(Application.find)\n            .to\n            .have\n            .been\n            .calledWith({\n              organisation: \"org2\"\n            });\n        });\n        it('returns saved session', () => {\n          return expect(result)\n            .to\n            .eventually\n            .become(session);\n        });\n        after(() => {\n          previousSession.organisation = 'organisationid';\n          previousSession.application = 'applicationid';\n          Session\n            .find\n            .reset();\n          Session\n            .prototype\n            .saveAsync\n            .reset();\n          Application\n            .find\n            .restore();\n        })\n      });\n    });\n  });\n\n  /** @test {logLogin}  */\n  describe('#logLogin', () => {\n    before(() => {\n      sinon.stub(LoginLog.prototype, 'saveAsync');\n      sinon.stub(IpLog.prototype, 'saveAsync');\n    });\n    after(() => {\n      LoginLog\n        .prototype\n        .saveAsync\n        .restore();\n      IpLog\n        .prototype\n        .saveAsync\n        .restore();\n    })\n    describe('with successful login', () => {\n      before(() => {\n        return SessionLogic.logLogin({\n          email: \"unittest@hoist.io\",\n          ipAddress: 'test-ip-address'\n        }, true);\n      });\n      it('saves a success ip log', () => {\n        return expect(IpLog.prototype.saveAsync)\n          .to\n          .have\n          .been\n          .calledOn(sinon.match({ip: 'test-ip-address', success: true}));\n      });\n      it('saves a success login log', () => {\n        return expect(LoginLog.prototype.saveAsync)\n          .to\n          .have\n          .been\n          .calledOn(sinon.match({username: \"unittest@hoist.io\", success: true}));\n      });\n      after(() => {\n        IpLog\n          .prototype\n          .saveAsync\n          .reset();\n        LoginLog\n          .prototype\n          .saveAsync\n          .reset();\n      });\n    })\n    describe('with unsuccessful login', () => {\n      before(() => {\n        return SessionLogic.logLogin({\n          email: \"unittest@hoist.io\",\n          ipAddress: 'test-ip-address'\n        }, false);\n      });\n      it('saves a fail ip log', () => {\n        return expect(IpLog.prototype.saveAsync)\n          .to\n          .have\n          .been\n          .calledOn(sinon.match({ip: 'test-ip-address', success: false}));\n      });\n      it('saves a fail login log', () => {\n        return expect(LoginLog.prototype.saveAsync)\n          .to\n          .have\n          .been\n          .calledOn(sinon.match({username: \"unittest@hoist.io\", success: false}));\n      });\n      after(() => {\n        IpLog\n          .prototype\n          .saveAsync\n          .reset();\n        LoginLog\n          .prototype\n          .saveAsync\n          .reset();\n      });\n    })\n  });\n});\n"
  },
  {
    "__docId__": 299,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe52",
    "testId": 52,
    "memberof": "tests/server/unit_tests/logic/session_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52",
    "access": null,
    "description": "SessionLogic",
    "lineNumber": 13
  },
  {
    "__docId__": 300,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe53",
    "testId": 53,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53",
    "access": null,
    "description": "#ensureLogin",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{ensureLogin}"
      }
    ],
    "testTargets": [
      "ensureLogin"
    ]
  },
  {
    "__docId__": 301,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe54",
    "testId": 54,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe54",
    "access": null,
    "description": "with missing email",
    "lineNumber": 48
  },
  {
    "__docId__": 302,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it55",
    "testId": 55,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe54",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe54.it55",
    "access": null,
    "description": "returns rejection",
    "lineNumber": 56
  },
  {
    "__docId__": 303,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe56",
    "testId": 56,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe56",
    "access": null,
    "description": "with missing password",
    "lineNumber": 68
  },
  {
    "__docId__": 304,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it57",
    "testId": 57,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe56",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe56.it57",
    "access": null,
    "description": "returns rejection",
    "lineNumber": 76
  },
  {
    "__docId__": 305,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe58",
    "testId": 58,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe58",
    "access": null,
    "description": "with invalid ip address",
    "lineNumber": 88
  },
  {
    "__docId__": 306,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it59",
    "testId": 59,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe58",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe58.it59",
    "access": null,
    "description": "returns rejection",
    "lineNumber": 104
  },
  {
    "__docId__": 307,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it60",
    "testId": 60,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe58",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe58.it60",
    "access": null,
    "description": "doesn't load user",
    "lineNumber": 110
  },
  {
    "__docId__": 308,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe61",
    "testId": 61,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe61",
    "access": null,
    "description": "with locked username",
    "lineNumber": 114
  },
  {
    "__docId__": 309,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it62",
    "testId": 62,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe61",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe61.it62",
    "access": null,
    "description": "checks lock with user",
    "lineNumber": 122
  },
  {
    "__docId__": 310,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it63",
    "testId": 63,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe61",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe61.it63",
    "access": null,
    "description": "returns rejection",
    "lineNumber": 129
  },
  {
    "__docId__": 311,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it64",
    "testId": 64,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe61",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe61.it64",
    "access": null,
    "description": "doesn't check user password",
    "lineNumber": 135
  },
  {
    "__docId__": 312,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe65",
    "testId": 65,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe65",
    "access": null,
    "description": "with invalid password",
    "lineNumber": 150
  },
  {
    "__docId__": 313,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it66",
    "testId": 66,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe65",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe65.it66",
    "access": null,
    "description": "returns rejection",
    "lineNumber": 158
  },
  {
    "__docId__": 314,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe67",
    "testId": 67,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe67",
    "access": null,
    "description": "with invalid username",
    "lineNumber": 182
  },
  {
    "__docId__": 315,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it68",
    "testId": 68,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe67",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe67.it68",
    "access": null,
    "description": "returns rejection",
    "lineNumber": 190
  },
  {
    "__docId__": 316,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe69",
    "testId": 69,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe69",
    "access": null,
    "description": "with valid details",
    "lineNumber": 214
  },
  {
    "__docId__": 317,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it70",
    "testId": 70,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe69",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe69.it70",
    "access": null,
    "description": "returns user",
    "lineNumber": 219
  },
  {
    "__docId__": 318,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it71",
    "testId": 71,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe69",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe53.describe69.it71",
    "access": null,
    "description": "looks up user by lowercase email",
    "lineNumber": 225
  },
  {
    "__docId__": 319,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe72",
    "testId": 72,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72",
    "access": null,
    "description": "#getSessionDetails",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{getSessionDetails}"
      }
    ],
    "testTargets": [
      "getSessionDetails"
    ]
  },
  {
    "__docId__": 320,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it73",
    "testId": 73,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72.it73",
    "access": null,
    "description": "returns current user",
    "lineNumber": 332
  },
  {
    "__docId__": 321,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it74",
    "testId": 74,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72.it74",
    "access": null,
    "description": "returns current organisation",
    "lineNumber": 337
  },
  {
    "__docId__": 322,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it75",
    "testId": 75,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72.it75",
    "access": null,
    "description": "returns current application",
    "lineNumber": 342
  },
  {
    "__docId__": 323,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it76",
    "testId": 76,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72.it76",
    "access": null,
    "description": "returns available applications",
    "lineNumber": 347
  },
  {
    "__docId__": 324,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it77",
    "testId": 77,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72.it77",
    "access": null,
    "description": "returns available organisations",
    "lineNumber": 352
  },
  {
    "__docId__": 325,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it78",
    "testId": 78,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72.it78",
    "access": null,
    "description": "looks up orgs based on user",
    "lineNumber": 357
  },
  {
    "__docId__": 326,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it79",
    "testId": 79,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe72.it79",
    "access": null,
    "description": "looks up applications based on organisation",
    "lineNumber": 368
  },
  {
    "__docId__": 327,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe80",
    "testId": 80,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80",
    "access": null,
    "description": "#createSessionForUser",
    "lineNumber": 388,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{createSessionForUser}"
      }
    ],
    "testTargets": [
      "createSessionForUser"
    ]
  },
  {
    "__docId__": 328,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe81",
    "testId": 81,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81",
    "access": null,
    "description": "with previous session",
    "lineNumber": 424
  },
  {
    "__docId__": 329,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe82",
    "testId": 82,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe82",
    "access": null,
    "description": "with a selected organisation and application",
    "lineNumber": 439
  },
  {
    "__docId__": 330,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it83",
    "testId": 83,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe82",
    "testDepth": 4,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe82.it83",
    "access": null,
    "description": "loads the correct session",
    "lineNumber": 444
  },
  {
    "__docId__": 331,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it84",
    "testId": 84,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe82",
    "testDepth": 4,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe82.it84",
    "access": null,
    "description": "selects only the organisation and application fields",
    "lineNumber": 451
  },
  {
    "__docId__": 332,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it85",
    "testId": 85,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe82",
    "testDepth": 4,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe82.it85",
    "access": null,
    "description": "creates session with matching application and organisation",
    "lineNumber": 458
  },
  {
    "__docId__": 333,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it86",
    "testId": 86,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe82",
    "testDepth": 4,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe82.it86",
    "access": null,
    "description": "returns saved session",
    "lineNumber": 465
  },
  {
    "__docId__": 334,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe87",
    "testId": 87,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe87",
    "access": null,
    "description": "without a selected organisation and application",
    "lineNumber": 481
  },
  {
    "__docId__": 335,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it88",
    "testId": 88,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe87",
    "testDepth": 4,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe87.it88",
    "access": null,
    "description": "creates session with last created organisation and last created application",
    "lineNumber": 502
  },
  {
    "__docId__": 336,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it89",
    "testId": 89,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe87",
    "testDepth": 4,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe87.it89",
    "access": null,
    "description": "finds last created application",
    "lineNumber": 509
  },
  {
    "__docId__": 337,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it90",
    "testId": 90,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe87",
    "testDepth": 4,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe80.describe81.describe87.it90",
    "access": null,
    "description": "returns saved session",
    "lineNumber": 518
  },
  {
    "__docId__": 338,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe91",
    "testId": 91,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91",
    "access": null,
    "description": "#logLogin",
    "lineNumber": 543,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{logLogin}"
      }
    ],
    "testTargets": [
      "logLogin"
    ]
  },
  {
    "__docId__": 339,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe92",
    "testId": 92,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91.describe92",
    "access": null,
    "description": "with successful login",
    "lineNumber": 558
  },
  {
    "__docId__": 340,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it93",
    "testId": 93,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91.describe92",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91.describe92.it93",
    "access": null,
    "description": "saves a success ip log",
    "lineNumber": 565
  },
  {
    "__docId__": 341,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it94",
    "testId": 94,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91.describe92",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91.describe92.it94",
    "access": null,
    "description": "saves a success login log",
    "lineNumber": 572
  },
  {
    "__docId__": 342,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe95",
    "testId": 95,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91.describe95",
    "access": null,
    "description": "with unsuccessful login",
    "lineNumber": 590
  },
  {
    "__docId__": 343,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it96",
    "testId": 96,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91.describe95",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91.describe95.it96",
    "access": null,
    "description": "saves a fail ip log",
    "lineNumber": 597
  },
  {
    "__docId__": 344,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it97",
    "testId": 97,
    "memberof": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91.describe95",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/session_tests.js~describe52.describe91.describe95.it97",
    "access": null,
    "description": "saves a fail login log",
    "lineNumber": 604
  },
  {
    "__docId__": 345,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/logic/user_logic_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {UserLogic, OrganisationLogic, ApplicationLogic} from '../../../../src/server/logic';\nimport chai, {expect} from 'chai';\nimport {HoistUser, Organisation, Application} from '@hoist/model';\nimport sinon from 'sinon';\n\ndescribe('UserLogic', () => {\n  /* @test {create} */\n  describe('#create', () => {\n    let validUser = {\n      username: 'aname',\n      email: 'test@hoist.io',\n      password: 'aPasswordThatIsLong',\n      passwordCheck: 'aPasswordThatIsLong'\n    };\n    describe('if no name supplied', () => {\n      let _result;\n      before(() => {\n        _result = UserLogic.create(Object.assign({}, validUser, {username: null}))\n      })\n      it('fails with invalid message', () => {\n        return expect(_result)\n          .to\n          .be\n          .rejectedWith('invalid name supplied');\n      });\n    });\n    describe('if no email supplied', () => {\n      let _result;\n      before(() => {\n        _result = UserLogic.create(Object.assign({}, validUser, {email: null}))\n      })\n      it('fails with invalid message', () => {\n        return expect(_result)\n          .to\n          .be\n          .rejectedWith('invalid email supplied');\n      });\n    });\n    describe('if invalid email is supplied', () => {\n      let _result;\n      before(() => {\n        _result = UserLogic.create(Object.assign({}, validUser, {email: 'notanemailaddress'}))\n      })\n      it('fails with invalid message', () => {\n        return expect(_result)\n          .to\n          .be\n          .rejectedWith('invalid email supplied');\n      });\n    });\n    describe('if no password supplied', () => {\n      let _result;\n      before(() => {\n        _result = UserLogic.create(Object.assign({}, validUser, {\n          password: null,\n          passwordCheck: null\n        }))\n      })\n      it('fails with invalid message', () => {\n        return expect(_result)\n          .to\n          .be\n          .rejectedWith('invalid password supplied');\n      });\n    });\n    describe('if missmatched supplied', () => {\n      let _result;\n      before(() => {\n        _result = UserLogic.create(Object.assign({}, validUser, {\n          password: validUser\n            .passwordCheck\n            .toLowerCase()\n        }))\n      })\n      it('fails with invalid message', () => {\n        return expect(_result)\n          .to\n          .be\n          .rejectedWith('supplied passwords don\\'t match');\n      });\n    });\n    describe('if existing user with email', () => {\n      let _result;\n      before(() => {\n        sinon\n          .stub(HoistUser, 'countAsync')\n          .returns(Promise.resolve(1));\n        _result = UserLogic.create(validUser);\n      });\n      after(() => {\n        HoistUser\n          .countAsync\n          .restore();\n      })\n      it('looks up correct user', () => {\n        return expect(HoistUser.countAsync)\n          .to\n          .have\n          .been\n          .calledWith({\n            $or: [\n              {\n                'emailAddresses.address': validUser\n                  .email\n                  .toLowerCase()\n              }, {\n                'name': validUser.username\n              }\n            ]\n          });\n      });\n      it('fails with invalid message', () => {\n        return expect(_result)\n          .to\n          .be\n          .rejectedWith('an account for that email address already exists');\n      });\n    });\n    describe('if valid credentials passed in', () => {\n      let _result;\n      let _createdApplication = new Application();\n      let _createdOrganisation = new Organisation();\n      before(() => {\n\n        sinon\n          .stub(HoistUser.prototype, 'saveAsync', function () {\n            return Promise.resolve(this);\n          });\n        sinon\n          .stub(Organisation,'countAsync')\n          .returns(Promise.resolve(0));\n        sinon\n          .stub(HoistUser, 'countAsync')\n          .returns(Promise.resolve(0));\n        sinon\n          .stub(OrganisationLogic, 'create')\n          .returns(Promise.resolve(_createdOrganisation));\n        sinon\n          .stub(ApplicationLogic, 'create')\n          .returns(Promise.resolve(_createdApplication));\n        _result = UserLogic.create(validUser);\n      });\n      after(() => {\n        ApplicationLogic\n          .create\n          .restore();\n        OrganisationLogic\n          .create\n          .restore();\n        HoistUser\n          .prototype\n          .saveAsync\n          .restore();\n        HoistUser\n          .countAsync\n          .restore();\n        Organisation\n          .countAsync\n          .restore();\n      })\n      it('returns a new user', () => {\n        return expect(_result)\n          .to\n          .eventually\n          .be\n          .instanceof(HoistUser);\n      });\n      it('saves the user', () => {\n        return _result.then((user) => {\n          return expect(HoistUser.prototype.saveAsync)\n            .to\n            .have\n            .been\n            .calledOn(user);\n        });\n      });\n      it('sets the user organisation', () => {\n        return _result.then((user) => {\n          return expect(user.organisations)\n            .to\n            .contain([_createdOrganisation]);\n        });\n      })\n      it('creates organisation with the users name', () => {\n        return expect(OrganisationLogic.create)\n          .to\n          .have\n          .been\n          .calledWith({name: validUser.username, personal: true});\n      });\n      it('creates application with correct name and organisation', () => {\n        return expect(ApplicationLogic.create)\n          .to\n          .have\n          .been\n          .calledWith({name: validUser.username, organisation: _createdOrganisation});\n      })\n    });\n  });\n})\n"
  },
  {
    "__docId__": 346,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe98",
    "testId": 98,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98",
    "access": null,
    "description": "UserLogic",
    "lineNumber": 6
  },
  {
    "__docId__": 347,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe99",
    "testId": 99,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99",
    "access": null,
    "description": "#create",
    "lineNumber": 8
  },
  {
    "__docId__": 348,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe100",
    "testId": 100,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe100",
    "access": null,
    "description": "if no name supplied",
    "lineNumber": 15
  },
  {
    "__docId__": 349,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it101",
    "testId": 101,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe100",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe100.it101",
    "access": null,
    "description": "fails with invalid message",
    "lineNumber": 20
  },
  {
    "__docId__": 350,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe102",
    "testId": 102,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe102",
    "access": null,
    "description": "if no email supplied",
    "lineNumber": 27
  },
  {
    "__docId__": 351,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it103",
    "testId": 103,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe102",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe102.it103",
    "access": null,
    "description": "fails with invalid message",
    "lineNumber": 32
  },
  {
    "__docId__": 352,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe104",
    "testId": 104,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe104",
    "access": null,
    "description": "if invalid email is supplied",
    "lineNumber": 39
  },
  {
    "__docId__": 353,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it105",
    "testId": 105,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe104",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe104.it105",
    "access": null,
    "description": "fails with invalid message",
    "lineNumber": 44
  },
  {
    "__docId__": 354,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe106",
    "testId": 106,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe106",
    "access": null,
    "description": "if no password supplied",
    "lineNumber": 51
  },
  {
    "__docId__": 355,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it107",
    "testId": 107,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe106",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe106.it107",
    "access": null,
    "description": "fails with invalid message",
    "lineNumber": 59
  },
  {
    "__docId__": 356,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe108",
    "testId": 108,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe108",
    "access": null,
    "description": "if missmatched supplied",
    "lineNumber": 66
  },
  {
    "__docId__": 357,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it109",
    "testId": 109,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe108",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe108.it109",
    "access": null,
    "description": "fails with invalid message",
    "lineNumber": 75
  },
  {
    "__docId__": 358,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe110",
    "testId": 110,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe110",
    "access": null,
    "description": "if existing user with email",
    "lineNumber": 82
  },
  {
    "__docId__": 359,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it111",
    "testId": 111,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe110",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe110.it111",
    "access": null,
    "description": "looks up correct user",
    "lineNumber": 95
  },
  {
    "__docId__": 360,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it112",
    "testId": 112,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe110",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe110.it112",
    "access": null,
    "description": "fails with invalid message",
    "lineNumber": 112
  },
  {
    "__docId__": 361,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe113",
    "testId": 113,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113",
    "access": null,
    "description": "if valid credentials passed in",
    "lineNumber": 119
  },
  {
    "__docId__": 362,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it114",
    "testId": 114,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113.it114",
    "access": null,
    "description": "returns a new user",
    "lineNumber": 161
  },
  {
    "__docId__": 363,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it115",
    "testId": 115,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113.it115",
    "access": null,
    "description": "saves the user",
    "lineNumber": 168
  },
  {
    "__docId__": 364,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it116",
    "testId": 116,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113.it116",
    "access": null,
    "description": "sets the user organisation",
    "lineNumber": 177
  },
  {
    "__docId__": 365,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it117",
    "testId": 117,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113.it117",
    "access": null,
    "description": "creates organisation with the users name",
    "lineNumber": 184
  },
  {
    "__docId__": 366,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it118",
    "testId": 118,
    "memberof": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113",
    "testDepth": 3,
    "longname": "tests/server/unit_tests/logic/user_logic_tests.js~describe98.describe99.describe113.it118",
    "access": null,
    "description": "creates application with correct name and organisation",
    "lineNumber": 191
  },
  {
    "__docId__": 367,
    "kind": "testFile",
    "static": true,
    "variation": null,
    "name": "tests/server/unit_tests/server_tests.js",
    "memberof": null,
    "longname": "tests/server/unit_tests/server_tests.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "import {_mongoose} from '@hoist/model';\nimport PortalServer from '../../../src/server';\nimport configurators from '../../../src/server/configuration';\nimport {Server as HapiServer} from 'hapi';\nimport sinon from 'sinon';\nimport {expect} from 'chai';\n\n/** @test {PortalServer} */\ndescribe('PortalServer', () => {\n  let server;\n  before(() => {\n    server = new PortalServer();\n  });\n  /** @test {PortalServer#start} */\n  describe('#start', () => {\n    before(() => {\n      sinon\n        .stub(configurators.server, 'configure')\n        .returns(Promise.resolve());\n      sinon\n        .stub(configurators.auth, 'configure')\n        .returns(Promise.resolve());\n      sinon\n        .stub(configurators.routes, 'configure')\n        .returns(Promise.resolve());\n      sinon\n        .stub(configurators.logging, 'configure')\n        .returns(Promise.resolve());\n      sinon\n        .stub(_mongoose, 'connectAsync')\n        .returns(Promise.resolve());\n      sinon\n        .stub(HapiServer.prototype, 'start')\n        .yields();\n      server.start();\n    });\n    after(() => {\n      configurators\n        .server\n        .configure\n        .restore();\n      configurators\n        .auth\n        .configure\n        .restore();\n      configurators\n        .routes\n        .configure\n        .restore();\n      configurators\n        .logging\n        .configure\n        .restore();\n      _mongoose\n        .connectAsync\n        .restore();\n      HapiServer\n        .prototype\n        .start\n        .restore();\n    });\n    it('connects to mongo', () => {\n      return expect(_mongoose.connectAsync).to.have.been.called;\n    });\n    it('configures the hapi server with base configuration', () => {\n      return expect(configurators.server.configure)\n        .to\n        .have\n        .been\n        .calledWith(server._hapiServer);\n    });\n    it('configures the hapi server with logging', () => {\n      return expect(configurators.logging.configure)\n        .to\n        .have\n        .been\n        .calledWith(server._hapiServer);\n    });\n    it('configures the hapi server with routes', () => {\n      return expect(configurators.routes.configure)\n        .to\n        .have\n        .been\n        .calledWith(server._hapiServer);\n    });\n    it('configures the hapi server with authentication', () => {\n      return expect(configurators.auth.configure)\n        .to\n        .have\n        .been\n        .calledWith(server._hapiServer);\n    });\n  })\n});\n"
  },
  {
    "__docId__": 368,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe119",
    "testId": 119,
    "memberof": "tests/server/unit_tests/server_tests.js",
    "testDepth": 0,
    "longname": "tests/server/unit_tests/server_tests.js~describe119",
    "access": null,
    "description": "PortalServer",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{PortalServer}"
      }
    ],
    "testTargets": [
      "PortalServer"
    ]
  },
  {
    "__docId__": 369,
    "kind": "testDescribe",
    "static": true,
    "variation": null,
    "name": "describe120",
    "testId": 120,
    "memberof": "tests/server/unit_tests/server_tests.js~describe119",
    "testDepth": 1,
    "longname": "tests/server/unit_tests/server_tests.js~describe119.describe120",
    "access": null,
    "description": "#start",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@test",
        "tagValue": "{PortalServer#start}"
      }
    ],
    "testTargets": [
      "PortalServer#start"
    ]
  },
  {
    "__docId__": 370,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it121",
    "testId": 121,
    "memberof": "tests/server/unit_tests/server_tests.js~describe119.describe120",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/server_tests.js~describe119.describe120.it121",
    "access": null,
    "description": "connects to mongo",
    "lineNumber": 62
  },
  {
    "__docId__": 371,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it122",
    "testId": 122,
    "memberof": "tests/server/unit_tests/server_tests.js~describe119.describe120",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/server_tests.js~describe119.describe120.it122",
    "access": null,
    "description": "configures the hapi server with base configuration",
    "lineNumber": 65
  },
  {
    "__docId__": 372,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it123",
    "testId": 123,
    "memberof": "tests/server/unit_tests/server_tests.js~describe119.describe120",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/server_tests.js~describe119.describe120.it123",
    "access": null,
    "description": "configures the hapi server with logging",
    "lineNumber": 72
  },
  {
    "__docId__": 373,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it124",
    "testId": 124,
    "memberof": "tests/server/unit_tests/server_tests.js~describe119.describe120",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/server_tests.js~describe119.describe120.it124",
    "access": null,
    "description": "configures the hapi server with routes",
    "lineNumber": 79
  },
  {
    "__docId__": 374,
    "kind": "testIt",
    "static": true,
    "variation": null,
    "name": "it125",
    "testId": 125,
    "memberof": "tests/server/unit_tests/server_tests.js~describe119.describe120",
    "testDepth": 2,
    "longname": "tests/server/unit_tests/server_tests.js~describe119.describe120.it125",
    "access": null,
    "description": "configures the hapi server with authentication",
    "lineNumber": 86
  }
]